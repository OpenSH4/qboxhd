/* $Id: init-st220eval.S,v 1.3 2005/11/10 11:21:29 sturgesa Exp $
 *
 *  init-stm220eval:
 *  The HW setting below come from the mb392.cmd and STm8000clocks.cmd
 *  distribuited with the ST40 toolchain R2.1.4
 */

#include "../../cpu/sh4_1xx/init-st40common.S"

	
	.balign 4
9:

#define _SH4REG_ASM_

#include "asm/stm8000reg.h"
	

	/*
	 * CLOCKGEN setup part 1
	 */
	POKE_SHORT(ST40_CPG_FRQCR, 0x0e4a)
	OR_LONG(ST40_CLOCKGEN_PLL1CR1(A), 0x20000000)
	UPDATE_LONG(ST40_CLOCKGEN_PLL1CR1(A), 0xe0000000, 0x04 | (0x24 << 8) | (0x0 << 16) | (0x1cd << 19))
	UPDATE_LONG(ST40_CLOCKGEN_PLL1CR1(A), 0xdfffffff, 0)
	WHILE_NE(ST40_CLOCKGEN_PLL1CR1(A), 0x80000000, 0x80000000)

	OR_LONG(ST40_CLOCKGEN_PLL2CR(A), 0x20000000)
	UPDATE_LONG(ST40_CLOCKGEN_PLL2CR(A), 0xe0000000, 0x04 | (0x30 << 8) | (0x1 << 16) | (0x1cb << 19))
	UPDATE_LONG(ST40_CLOCKGEN_PLL2CR(A), 0xdfffffff, 0)
	WHILE_NE(ST40_CLOCKGEN_PLL2CR(A), 0x80000000, 0x80000000)

	UPDATE_LONG(ST40_CLOCKGEN_CLK_RATIO(A), 0xb8, 1)
	OR_LONG(ST40_CLOCKGEN_CLK_RATIO(A), 0x40)
	UPDATE_LONG(ST40_CLOCKGEN_CLK_RATIO(A), 0xc7, 0)

	/*
	 * SYSCONF setup
	 */
	POKE_LONG(ST40_SYSCONF_SYS_CON1_0, 0x01000000)
	POKE_LONG(ST40_SYSCONF_SYS_CON2_1, 0x0a800000)

	/*
	 * LMI setup
	 */
	POKE_LONG(ST40_LMI_MIM(), 0x04100243)
	POKE_LONG(ST40_LMI_STR(), 0x352d4345)
	POKE_LONG(ST40_LMI_SDRA0(), 0x0c001903)
	POKE_LONG(ST40_LMI_SDRA1(), 0x0c001903)
	POKE_LONG(ST40_LMI_SCR(), 0x00000003)
	POKE_LONG(ST40_LMI_SCR(), 0x00000001)
	POKE_LONG(ST40_LMI_SCR(), 0x00000002)
	POKE_LONG(ST40_LMI_SDMR0(), 0x00000400)
	POKE_LONG(ST40_LMI_SDMR1(), 0x00000400)
	POKE_LONG(ST40_LMI_SDMR0(), 0x00000163)
	POKE_LONG(ST40_LMI_SDMR1(), 0x00000163)
	POKE_LONG(ST40_LMI_SCR(), 0x00000002)
	POKE_LONG(ST40_LMI_SCR(), 0x00000004)
	POKE_LONG(ST40_LMI_SCR(), 0x00000004)
	POKE_LONG(ST40_LMI_SCR(), 0x00000004)
	POKE_LONG(ST40_LMI_SDMR0(), 0x00000063)
	POKE_LONG(ST40_LMI_SDMR1(), 0x00000063)
	POKE_LONG(ST40_LMI_SCR(), 0x00000000)

	/*
	 * EMI setup
	 */
	POKE_LONG(ST40_EMI_BANK_ENABLE, 0x00000006)
	POKE_LONG(ST40_EMI_BANK0_BASEADDRESS, 0x00000000)
	POKE_LONG(ST40_EMI_BANK1_BASEADDRESS, 0x00000002)
	POKE_LONG(ST40_EMI_BANK2_BASEADDRESS, 0x00000004)
	POKE_LONG(ST40_EMI_BANK3_BASEADDRESS, 0x00000006)
	POKE_LONG(ST40_EMI_BANK4_BASEADDRESS, 0x00000008)
	POKE_LONG(ST40_EMI_BANK5_BASEADDRESS, 0x0000000a)
	POKE_LONG(ST40_EMI_BANK0_EMICONFIGDATA0, 0x001016f1)
	POKE_LONG(ST40_EMI_BANK0_EMICONFIGDATA1, 0x9d200000)
	POKE_LONG(ST40_EMI_BANK0_EMICONFIGDATA2, 0x9d200000)
	POKE_LONG(ST40_EMI_BANK0_EMICONFIGDATA3, 0x00000000)
	POKE_LONG(ST40_EMI_BANK3_EMICONFIGDATA0, 0x041086f1)
	POKE_LONG(ST40_EMI_BANK3_EMICONFIGDATA1, 0x0e024400)
	POKE_LONG(ST40_EMI_BANK3_EMICONFIGDATA2, 0x0e024400)
	POKE_LONG(ST40_EMI_BANK3_EMICONFIGDATA3, 0x0000a49a)
	POKE_LONG(ST40_EMI_BANK4_EMICONFIGDATA0, 0x001016f1)
	POKE_LONG(ST40_EMI_BANK4_EMICONFIGDATA1, 0x8a000000)
	POKE_LONG(ST40_EMI_BANK4_EMICONFIGDATA2, 0x8a220000)
	POKE_LONG(ST40_EMI_BANK4_EMICONFIGDATA3, 0x00000000)
	POKE_LONG(ST40_EMI_FLASHCLKSEL, 0x00000002)
	POKE_LONG(ST40_EMI_CLKENABLE, 0x00000001)

	/*
	 * CLOCKGEN setup part 2
	 */
	OR_LONG(ST40_LMI_COC_0(), 1 << 22)
	OR_LONG(ST40_LMI_COC_1(), 1 << 13)
	WHILE_NE(ST40_LMI_CIC(), 0x00080200, 0x00000000)

	UPDATE_LONG(ST40_LMI_COC_0(), ~(1 << 22), 0)
	UPDATE_LONG(ST40_LMI_COC_1(), ~(1 << 13), 0)
	WHILE_NE(ST40_LMI_CIC(), 0x00080200, 0x00080200)

	END_MARKER

19:		

				
	



