# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
This module gives access to an iPod's content. It provides an easy to
use API to retrieve the list of files and playlists stored on an iPod,
modify them, and save them back to the iPod.

This module implements the libgpod C API as directly as possible in
Python.  See the main gpod module for a more traditional Python
interface.
"""

import _gpod
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


version_info = (0, 
		7, 
		2)
version = '.'.join(map(str, version_info))  

ENABLE_NLS = _gpod.ENABLE_NLS
GETTEXT_PACKAGE = _gpod.GETTEXT_PACKAGE
HAVE_BIND_TEXTDOMAIN_CODESET = _gpod.HAVE_BIND_TEXTDOMAIN_CODESET
HAVE_DCGETTEXT = _gpod.HAVE_DCGETTEXT
HAVE_DLFCN_H = _gpod.HAVE_DLFCN_H
HAVE_GETTEXT = _gpod.HAVE_GETTEXT
HAVE_INTTYPES_H = _gpod.HAVE_INTTYPES_H
HAVE_LC_MESSAGES = _gpod.HAVE_LC_MESSAGES
HAVE_LIBXML = _gpod.HAVE_LIBXML
HAVE_LOCALE_H = _gpod.HAVE_LOCALE_H
HAVE_LOCALTIME_R = _gpod.HAVE_LOCALTIME_R
HAVE_MEMORY_H = _gpod.HAVE_MEMORY_H
HAVE_STDINT_H = _gpod.HAVE_STDINT_H
HAVE_STDLIB_H = _gpod.HAVE_STDLIB_H
HAVE_STRINGS_H = _gpod.HAVE_STRINGS_H
HAVE_STRING_H = _gpod.HAVE_STRING_H
HAVE_STRUCT_TM_TM_GMTOFF = _gpod.HAVE_STRUCT_TM_TM_GMTOFF
HAVE_SYS_STAT_H = _gpod.HAVE_SYS_STAT_H
HAVE_SYS_TYPES_H = _gpod.HAVE_SYS_TYPES_H
HAVE_UNISTD_H = _gpod.HAVE_UNISTD_H
PACKAGE = _gpod.PACKAGE
PACKAGE_BUGREPORT = _gpod.PACKAGE_BUGREPORT
PACKAGE_NAME = _gpod.PACKAGE_NAME
PACKAGE_STRING = _gpod.PACKAGE_STRING
PACKAGE_TARNAME = _gpod.PACKAGE_TARNAME
PACKAGE_VERSION = _gpod.PACKAGE_VERSION
STDC_HEADERS = _gpod.STDC_HEADERS
VERSION = _gpod.VERSION
_GNU_SOURCE = _gpod._GNU_SOURCE

def sw_get_tracks(*args):
  """
    sw_get_tracks(Itdb_iTunesDB itdb) -> [Itdb_Track, ...]

    Get tracks in itdb.

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: a list of Itdb_Track objects

    """
  return _gpod.sw_get_tracks(*args)

def sw_get_track(*args):
  """
    sw_get_track(GList list, gint index) -> Itdb_Track

    Get a track

    Parameters
    list: a GList
    index: position of the track
    Returns: an Itdb_Track

    """
  return _gpod.sw_get_track(*args)

def sw_get_rule(*args):
  """
    sw_get_rule(GList list, gint index) -> Itdb_SPLRule

    Get a rule

    Parameters
    list: a GList
    index: position of the rule
    Returns: an Itdb_SPLRule

    """
  return _gpod.sw_get_rule(*args)

def sw_get_playlist(*args):
  """
    sw_get_playlist(GList list, gint index) -> Itdb_Playlist

    Get a playlist

    Parameters
    list: a GList
    index: position of the playlist
    Returns: an Itdb_Playlist

    """
  return _gpod.sw_get_playlist(*args)

def sw_get_list_len(*args):
  """
    sw_get_list_len(GList list) -> Int

    Get the length of list

    Parameters
    list: a GList
    Returns: length of list

    """
  return _gpod.sw_get_list_len(*args)

def sw_get_playlists(*args):
  """
    sw_get_playlists(Itdb_iTunesDB itdb) -> [Itdb_Playlist, ...]

    Get playlists

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: a list of Itdb_Playlist objects

    """
  return _gpod.sw_get_playlists(*args)

def sw_get_playlist_tracks(*args):
  """
    sw_get_playlist_tracks(Itdb_Playlist pl) -> [Itdb_Track, ...]

    Get tracks in playlist

    pl: an Itdb_Playlist
    Returns: a list of Itdb_Track objects

    """
  return _gpod.sw_get_playlist_tracks(*args)

def sw_set_track_userdata(*args):
  """
    sw_set_track_userdata(Itdb_Track track, Dictionary userdata)

    Set a tracks userdata

    Parameters
    track: an Itdb_Track
    userdata: a dictionary.  Note that userdata can be None, in order to
    clear all userdata.

    """
  return _gpod.sw_set_track_userdata(*args)

def sw_get_track_userdata(*args):
  """
    sw_get_track_userdata(Itdb_Track track) -> Dictionary

    Get track userdata

    Parameters
    track: an Itdb_Track
    Returns: a dictionary containing any userdata for track

    """
  return _gpod.sw_get_track_userdata(*args)

def sw_get_photoalbums(*args):
  """sw_get_photoalbums(Itdb_PhotoDB db) -> PyObject"""
  return _gpod.sw_get_photoalbums(*args)

def sw_get_photoalbum(*args):
  """sw_get_photoalbum(GList list, gint index) -> PyObject"""
  return _gpod.sw_get_photoalbum(*args)

def sw_get_photos(*args):
  """sw_get_photos(Itdb_PhotoDB db) -> PyObject"""
  return _gpod.sw_get_photos(*args)

def sw_get_photo(*args):
  """sw_get_photo(GList list, gint index) -> PyObject"""
  return _gpod.sw_get_photo(*args)

def sw_get_photoalbum_members(*args):
  """sw_get_photoalbum_members(Itdb_PhotoAlbum album) -> PyObject"""
  return _gpod.sw_get_photoalbum_members(*args)

def sw_ipod_device_to_dict(*args):
  """sw_ipod_device_to_dict(Itdb_Device device) -> PyObject"""
  return _gpod.sw_ipod_device_to_dict(*args)
ITDB_IPOD_GENERATION_UNKNOWN = _gpod.ITDB_IPOD_GENERATION_UNKNOWN
ITDB_IPOD_GENERATION_FIRST = _gpod.ITDB_IPOD_GENERATION_FIRST
ITDB_IPOD_GENERATION_SECOND = _gpod.ITDB_IPOD_GENERATION_SECOND
ITDB_IPOD_GENERATION_THIRD = _gpod.ITDB_IPOD_GENERATION_THIRD
ITDB_IPOD_GENERATION_FOURTH = _gpod.ITDB_IPOD_GENERATION_FOURTH
ITDB_IPOD_GENERATION_PHOTO = _gpod.ITDB_IPOD_GENERATION_PHOTO
ITDB_IPOD_GENERATION_MOBILE = _gpod.ITDB_IPOD_GENERATION_MOBILE
ITDB_IPOD_GENERATION_MINI_1 = _gpod.ITDB_IPOD_GENERATION_MINI_1
ITDB_IPOD_GENERATION_MINI_2 = _gpod.ITDB_IPOD_GENERATION_MINI_2
ITDB_IPOD_GENERATION_SHUFFLE_1 = _gpod.ITDB_IPOD_GENERATION_SHUFFLE_1
ITDB_IPOD_GENERATION_SHUFFLE_2 = _gpod.ITDB_IPOD_GENERATION_SHUFFLE_2
ITDB_IPOD_GENERATION_SHUFFLE_3 = _gpod.ITDB_IPOD_GENERATION_SHUFFLE_3
ITDB_IPOD_GENERATION_NANO_1 = _gpod.ITDB_IPOD_GENERATION_NANO_1
ITDB_IPOD_GENERATION_NANO_2 = _gpod.ITDB_IPOD_GENERATION_NANO_2
ITDB_IPOD_GENERATION_NANO_3 = _gpod.ITDB_IPOD_GENERATION_NANO_3
ITDB_IPOD_GENERATION_NANO_4 = _gpod.ITDB_IPOD_GENERATION_NANO_4
ITDB_IPOD_GENERATION_VIDEO_1 = _gpod.ITDB_IPOD_GENERATION_VIDEO_1
ITDB_IPOD_GENERATION_VIDEO_2 = _gpod.ITDB_IPOD_GENERATION_VIDEO_2
ITDB_IPOD_GENERATION_CLASSIC_1 = _gpod.ITDB_IPOD_GENERATION_CLASSIC_1
ITDB_IPOD_GENERATION_CLASSIC_2 = _gpod.ITDB_IPOD_GENERATION_CLASSIC_2
ITDB_IPOD_GENERATION_TOUCH_1 = _gpod.ITDB_IPOD_GENERATION_TOUCH_1
ITDB_IPOD_GENERATION_IPHONE_1 = _gpod.ITDB_IPOD_GENERATION_IPHONE_1
ITDB_IPOD_MODEL_INVALID = _gpod.ITDB_IPOD_MODEL_INVALID
ITDB_IPOD_MODEL_UNKNOWN = _gpod.ITDB_IPOD_MODEL_UNKNOWN
ITDB_IPOD_MODEL_COLOR = _gpod.ITDB_IPOD_MODEL_COLOR
ITDB_IPOD_MODEL_COLOR_U2 = _gpod.ITDB_IPOD_MODEL_COLOR_U2
ITDB_IPOD_MODEL_REGULAR = _gpod.ITDB_IPOD_MODEL_REGULAR
ITDB_IPOD_MODEL_REGULAR_U2 = _gpod.ITDB_IPOD_MODEL_REGULAR_U2
ITDB_IPOD_MODEL_MINI = _gpod.ITDB_IPOD_MODEL_MINI
ITDB_IPOD_MODEL_MINI_BLUE = _gpod.ITDB_IPOD_MODEL_MINI_BLUE
ITDB_IPOD_MODEL_MINI_PINK = _gpod.ITDB_IPOD_MODEL_MINI_PINK
ITDB_IPOD_MODEL_MINI_GREEN = _gpod.ITDB_IPOD_MODEL_MINI_GREEN
ITDB_IPOD_MODEL_MINI_GOLD = _gpod.ITDB_IPOD_MODEL_MINI_GOLD
ITDB_IPOD_MODEL_SHUFFLE = _gpod.ITDB_IPOD_MODEL_SHUFFLE
ITDB_IPOD_MODEL_NANO_WHITE = _gpod.ITDB_IPOD_MODEL_NANO_WHITE
ITDB_IPOD_MODEL_NANO_BLACK = _gpod.ITDB_IPOD_MODEL_NANO_BLACK
ITDB_IPOD_MODEL_VIDEO_WHITE = _gpod.ITDB_IPOD_MODEL_VIDEO_WHITE
ITDB_IPOD_MODEL_VIDEO_BLACK = _gpod.ITDB_IPOD_MODEL_VIDEO_BLACK
ITDB_IPOD_MODEL_MOBILE_1 = _gpod.ITDB_IPOD_MODEL_MOBILE_1
ITDB_IPOD_MODEL_VIDEO_U2 = _gpod.ITDB_IPOD_MODEL_VIDEO_U2
ITDB_IPOD_MODEL_NANO_SILVER = _gpod.ITDB_IPOD_MODEL_NANO_SILVER
ITDB_IPOD_MODEL_NANO_BLUE = _gpod.ITDB_IPOD_MODEL_NANO_BLUE
ITDB_IPOD_MODEL_NANO_GREEN = _gpod.ITDB_IPOD_MODEL_NANO_GREEN
ITDB_IPOD_MODEL_NANO_PINK = _gpod.ITDB_IPOD_MODEL_NANO_PINK
ITDB_IPOD_MODEL_NANO_RED = _gpod.ITDB_IPOD_MODEL_NANO_RED
ITDB_IPOD_MODEL_NANO_YELLOW = _gpod.ITDB_IPOD_MODEL_NANO_YELLOW
ITDB_IPOD_MODEL_NANO_PURPLE = _gpod.ITDB_IPOD_MODEL_NANO_PURPLE
ITDB_IPOD_MODEL_NANO_ORANGE = _gpod.ITDB_IPOD_MODEL_NANO_ORANGE
ITDB_IPOD_MODEL_IPHONE_1 = _gpod.ITDB_IPOD_MODEL_IPHONE_1
ITDB_IPOD_MODEL_SHUFFLE_SILVER = _gpod.ITDB_IPOD_MODEL_SHUFFLE_SILVER
ITDB_IPOD_MODEL_SHUFFLE_PINK = _gpod.ITDB_IPOD_MODEL_SHUFFLE_PINK
ITDB_IPOD_MODEL_SHUFFLE_BLUE = _gpod.ITDB_IPOD_MODEL_SHUFFLE_BLUE
ITDB_IPOD_MODEL_SHUFFLE_GREEN = _gpod.ITDB_IPOD_MODEL_SHUFFLE_GREEN
ITDB_IPOD_MODEL_SHUFFLE_ORANGE = _gpod.ITDB_IPOD_MODEL_SHUFFLE_ORANGE
ITDB_IPOD_MODEL_SHUFFLE_PURPLE = _gpod.ITDB_IPOD_MODEL_SHUFFLE_PURPLE
ITDB_IPOD_MODEL_SHUFFLE_RED = _gpod.ITDB_IPOD_MODEL_SHUFFLE_RED
ITDB_IPOD_MODEL_CLASSIC_SILVER = _gpod.ITDB_IPOD_MODEL_CLASSIC_SILVER
ITDB_IPOD_MODEL_CLASSIC_BLACK = _gpod.ITDB_IPOD_MODEL_CLASSIC_BLACK
ITDB_IPOD_MODEL_TOUCH_BLACK = _gpod.ITDB_IPOD_MODEL_TOUCH_BLACK
class _Itdb_IpodInfo(_object):
    """Proxy of C _Itdb_IpodInfo struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_IpodInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_IpodInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["model_number"] = _gpod._Itdb_IpodInfo_model_number_set
    __swig_getmethods__["model_number"] = _gpod._Itdb_IpodInfo_model_number_get
    if _newclass:model_number = _swig_property(_gpod._Itdb_IpodInfo_model_number_get, _gpod._Itdb_IpodInfo_model_number_set)
    __swig_getmethods__["capacity"] = _gpod._Itdb_IpodInfo_capacity_get
    if _newclass:capacity = _swig_property(_gpod._Itdb_IpodInfo_capacity_get)
    __swig_getmethods__["ipod_model"] = _gpod._Itdb_IpodInfo_ipod_model_get
    if _newclass:ipod_model = _swig_property(_gpod._Itdb_IpodInfo_ipod_model_get)
    __swig_getmethods__["ipod_generation"] = _gpod._Itdb_IpodInfo_ipod_generation_get
    if _newclass:ipod_generation = _swig_property(_gpod._Itdb_IpodInfo_ipod_generation_get)
    __swig_getmethods__["musicdirs"] = _gpod._Itdb_IpodInfo_musicdirs_get
    if _newclass:musicdirs = _swig_property(_gpod._Itdb_IpodInfo_musicdirs_get)
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_IpodInfo_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_IpodInfo_reserved_int1_get)
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_IpodInfo_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_IpodInfo_reserved_int2_get)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_IpodInfo_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_IpodInfo_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_IpodInfo_reserved1_get, _gpod._Itdb_IpodInfo_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_IpodInfo_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_IpodInfo_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_IpodInfo_reserved2_get, _gpod._Itdb_IpodInfo_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_IpodInfo"""
        this = _gpod.new__Itdb_IpodInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_IpodInfo
    __del__ = lambda self : None;
_Itdb_IpodInfo_swigregister = _gpod._Itdb_IpodInfo_swigregister
_Itdb_IpodInfo_swigregister(_Itdb_IpodInfo)

ITDB_SPL_STRING_MAXLEN = _gpod.ITDB_SPL_STRING_MAXLEN
ITDB_SPLMATCH_AND = _gpod.ITDB_SPLMATCH_AND
ITDB_SPLMATCH_OR = _gpod.ITDB_SPLMATCH_OR
ITDB_LIMITTYPE_MINUTES = _gpod.ITDB_LIMITTYPE_MINUTES
ITDB_LIMITTYPE_MB = _gpod.ITDB_LIMITTYPE_MB
ITDB_LIMITTYPE_SONGS = _gpod.ITDB_LIMITTYPE_SONGS
ITDB_LIMITTYPE_HOURS = _gpod.ITDB_LIMITTYPE_HOURS
ITDB_LIMITTYPE_GB = _gpod.ITDB_LIMITTYPE_GB
ITDB_LIMITSORT_RANDOM = _gpod.ITDB_LIMITSORT_RANDOM
ITDB_LIMITSORT_SONG_NAME = _gpod.ITDB_LIMITSORT_SONG_NAME
ITDB_LIMITSORT_ALBUM = _gpod.ITDB_LIMITSORT_ALBUM
ITDB_LIMITSORT_ARTIST = _gpod.ITDB_LIMITSORT_ARTIST
ITDB_LIMITSORT_GENRE = _gpod.ITDB_LIMITSORT_GENRE
ITDB_LIMITSORT_MOST_RECENTLY_ADDED = _gpod.ITDB_LIMITSORT_MOST_RECENTLY_ADDED
ITDB_LIMITSORT_LEAST_RECENTLY_ADDED = _gpod.ITDB_LIMITSORT_LEAST_RECENTLY_ADDED
ITDB_LIMITSORT_MOST_OFTEN_PLAYED = _gpod.ITDB_LIMITSORT_MOST_OFTEN_PLAYED
ITDB_LIMITSORT_LEAST_OFTEN_PLAYED = _gpod.ITDB_LIMITSORT_LEAST_OFTEN_PLAYED
ITDB_LIMITSORT_MOST_RECENTLY_PLAYED = _gpod.ITDB_LIMITSORT_MOST_RECENTLY_PLAYED
ITDB_LIMITSORT_LEAST_RECENTLY_PLAYED = _gpod.ITDB_LIMITSORT_LEAST_RECENTLY_PLAYED
ITDB_LIMITSORT_HIGHEST_RATING = _gpod.ITDB_LIMITSORT_HIGHEST_RATING
ITDB_LIMITSORT_LOWEST_RATING = _gpod.ITDB_LIMITSORT_LOWEST_RATING
ITDB_SPLACTION_IS_INT = _gpod.ITDB_SPLACTION_IS_INT
ITDB_SPLACTION_IS_GREATER_THAN = _gpod.ITDB_SPLACTION_IS_GREATER_THAN
ITDB_SPLACTION_IS_LESS_THAN = _gpod.ITDB_SPLACTION_IS_LESS_THAN
ITDB_SPLACTION_IS_IN_THE_RANGE = _gpod.ITDB_SPLACTION_IS_IN_THE_RANGE
ITDB_SPLACTION_IS_IN_THE_LAST = _gpod.ITDB_SPLACTION_IS_IN_THE_LAST
ITDB_SPLACTION_BINARY_AND = _gpod.ITDB_SPLACTION_BINARY_AND
ITDB_SPLACTION_IS_STRING = _gpod.ITDB_SPLACTION_IS_STRING
ITDB_SPLACTION_CONTAINS = _gpod.ITDB_SPLACTION_CONTAINS
ITDB_SPLACTION_STARTS_WITH = _gpod.ITDB_SPLACTION_STARTS_WITH
ITDB_SPLACTION_ENDS_WITH = _gpod.ITDB_SPLACTION_ENDS_WITH
ITDB_SPLACTION_IS_NOT_INT = _gpod.ITDB_SPLACTION_IS_NOT_INT
ITDB_SPLACTION_IS_NOT_GREATER_THAN = _gpod.ITDB_SPLACTION_IS_NOT_GREATER_THAN
ITDB_SPLACTION_IS_NOT_LESS_THAN = _gpod.ITDB_SPLACTION_IS_NOT_LESS_THAN
ITDB_SPLACTION_IS_NOT_IN_THE_RANGE = _gpod.ITDB_SPLACTION_IS_NOT_IN_THE_RANGE
ITDB_SPLACTION_IS_NOT_IN_THE_LAST = _gpod.ITDB_SPLACTION_IS_NOT_IN_THE_LAST
ITDB_SPLACTION_IS_NOT = _gpod.ITDB_SPLACTION_IS_NOT
ITDB_SPLACTION_DOES_NOT_CONTAIN = _gpod.ITDB_SPLACTION_DOES_NOT_CONTAIN
ITDB_SPLACTION_DOES_NOT_START_WITH = _gpod.ITDB_SPLACTION_DOES_NOT_START_WITH
ITDB_SPLACTION_DOES_NOT_END_WITH = _gpod.ITDB_SPLACTION_DOES_NOT_END_WITH
ITDB_SPLFT_STRING = _gpod.ITDB_SPLFT_STRING
ITDB_SPLFT_INT = _gpod.ITDB_SPLFT_INT
ITDB_SPLFT_BOOLEAN = _gpod.ITDB_SPLFT_BOOLEAN
ITDB_SPLFT_DATE = _gpod.ITDB_SPLFT_DATE
ITDB_SPLFT_PLAYLIST = _gpod.ITDB_SPLFT_PLAYLIST
ITDB_SPLFT_UNKNOWN = _gpod.ITDB_SPLFT_UNKNOWN
ITDB_SPLFT_BINARY_AND = _gpod.ITDB_SPLFT_BINARY_AND
ITDB_SPLAT_STRING = _gpod.ITDB_SPLAT_STRING
ITDB_SPLAT_INT = _gpod.ITDB_SPLAT_INT
ITDB_SPLAT_DATE = _gpod.ITDB_SPLAT_DATE
ITDB_SPLAT_RANGE_INT = _gpod.ITDB_SPLAT_RANGE_INT
ITDB_SPLAT_RANGE_DATE = _gpod.ITDB_SPLAT_RANGE_DATE
ITDB_SPLAT_INTHELAST = _gpod.ITDB_SPLAT_INTHELAST
ITDB_SPLAT_PLAYLIST = _gpod.ITDB_SPLAT_PLAYLIST
ITDB_SPLAT_NONE = _gpod.ITDB_SPLAT_NONE
ITDB_SPLAT_INVALID = _gpod.ITDB_SPLAT_INVALID
ITDB_SPLAT_UNKNOWN = _gpod.ITDB_SPLAT_UNKNOWN
ITDB_SPLAT_BINARY_AND = _gpod.ITDB_SPLAT_BINARY_AND
ITDB_SPLACTION_LAST_DAYS_VALUE = _gpod.ITDB_SPLACTION_LAST_DAYS_VALUE
ITDB_SPLACTION_LAST_WEEKS_VALUE = _gpod.ITDB_SPLACTION_LAST_WEEKS_VALUE
ITDB_SPLACTION_LAST_MONTHS_VALUE = _gpod.ITDB_SPLACTION_LAST_MONTHS_VALUE
ITDB_SPLFIELD_SONG_NAME = _gpod.ITDB_SPLFIELD_SONG_NAME
ITDB_SPLFIELD_ALBUM = _gpod.ITDB_SPLFIELD_ALBUM
ITDB_SPLFIELD_ARTIST = _gpod.ITDB_SPLFIELD_ARTIST
ITDB_SPLFIELD_BITRATE = _gpod.ITDB_SPLFIELD_BITRATE
ITDB_SPLFIELD_SAMPLE_RATE = _gpod.ITDB_SPLFIELD_SAMPLE_RATE
ITDB_SPLFIELD_YEAR = _gpod.ITDB_SPLFIELD_YEAR
ITDB_SPLFIELD_GENRE = _gpod.ITDB_SPLFIELD_GENRE
ITDB_SPLFIELD_KIND = _gpod.ITDB_SPLFIELD_KIND
ITDB_SPLFIELD_DATE_MODIFIED = _gpod.ITDB_SPLFIELD_DATE_MODIFIED
ITDB_SPLFIELD_TRACKNUMBER = _gpod.ITDB_SPLFIELD_TRACKNUMBER
ITDB_SPLFIELD_SIZE = _gpod.ITDB_SPLFIELD_SIZE
ITDB_SPLFIELD_TIME = _gpod.ITDB_SPLFIELD_TIME
ITDB_SPLFIELD_COMMENT = _gpod.ITDB_SPLFIELD_COMMENT
ITDB_SPLFIELD_DATE_ADDED = _gpod.ITDB_SPLFIELD_DATE_ADDED
ITDB_SPLFIELD_COMPOSER = _gpod.ITDB_SPLFIELD_COMPOSER
ITDB_SPLFIELD_PLAYCOUNT = _gpod.ITDB_SPLFIELD_PLAYCOUNT
ITDB_SPLFIELD_LAST_PLAYED = _gpod.ITDB_SPLFIELD_LAST_PLAYED
ITDB_SPLFIELD_DISC_NUMBER = _gpod.ITDB_SPLFIELD_DISC_NUMBER
ITDB_SPLFIELD_RATING = _gpod.ITDB_SPLFIELD_RATING
ITDB_SPLFIELD_COMPILATION = _gpod.ITDB_SPLFIELD_COMPILATION
ITDB_SPLFIELD_BPM = _gpod.ITDB_SPLFIELD_BPM
ITDB_SPLFIELD_GROUPING = _gpod.ITDB_SPLFIELD_GROUPING
ITDB_SPLFIELD_PLAYLIST = _gpod.ITDB_SPLFIELD_PLAYLIST
ITDB_SPLFIELD_VIDEO_KIND = _gpod.ITDB_SPLFIELD_VIDEO_KIND
ITDB_SPLFIELD_TVSHOW = _gpod.ITDB_SPLFIELD_TVSHOW
ITDB_SPLFIELD_SEASON_NR = _gpod.ITDB_SPLFIELD_SEASON_NR
ITDB_SPLFIELD_SKIPCOUNT = _gpod.ITDB_SPLFIELD_SKIPCOUNT
ITDB_SPLFIELD_LAST_SKIPPED = _gpod.ITDB_SPLFIELD_LAST_SKIPPED
ITDB_SPLFIELD_ALBUMARTIST = _gpod.ITDB_SPLFIELD_ALBUMARTIST
class _Itdb_SPLPref(_object):
    """Proxy of C _Itdb_SPLPref struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_SPLPref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_SPLPref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["liveupdate"] = _gpod._Itdb_SPLPref_liveupdate_set
    __swig_getmethods__["liveupdate"] = _gpod._Itdb_SPLPref_liveupdate_get
    if _newclass:liveupdate = _swig_property(_gpod._Itdb_SPLPref_liveupdate_get, _gpod._Itdb_SPLPref_liveupdate_set)
    __swig_setmethods__["checkrules"] = _gpod._Itdb_SPLPref_checkrules_set
    __swig_getmethods__["checkrules"] = _gpod._Itdb_SPLPref_checkrules_get
    if _newclass:checkrules = _swig_property(_gpod._Itdb_SPLPref_checkrules_get, _gpod._Itdb_SPLPref_checkrules_set)
    __swig_setmethods__["checklimits"] = _gpod._Itdb_SPLPref_checklimits_set
    __swig_getmethods__["checklimits"] = _gpod._Itdb_SPLPref_checklimits_get
    if _newclass:checklimits = _swig_property(_gpod._Itdb_SPLPref_checklimits_get, _gpod._Itdb_SPLPref_checklimits_set)
    __swig_setmethods__["limittype"] = _gpod._Itdb_SPLPref_limittype_set
    __swig_getmethods__["limittype"] = _gpod._Itdb_SPLPref_limittype_get
    if _newclass:limittype = _swig_property(_gpod._Itdb_SPLPref_limittype_get, _gpod._Itdb_SPLPref_limittype_set)
    __swig_setmethods__["limitsort"] = _gpod._Itdb_SPLPref_limitsort_set
    __swig_getmethods__["limitsort"] = _gpod._Itdb_SPLPref_limitsort_get
    if _newclass:limitsort = _swig_property(_gpod._Itdb_SPLPref_limitsort_get, _gpod._Itdb_SPLPref_limitsort_set)
    __swig_setmethods__["limitvalue"] = _gpod._Itdb_SPLPref_limitvalue_set
    __swig_getmethods__["limitvalue"] = _gpod._Itdb_SPLPref_limitvalue_get
    if _newclass:limitvalue = _swig_property(_gpod._Itdb_SPLPref_limitvalue_get, _gpod._Itdb_SPLPref_limitvalue_set)
    __swig_setmethods__["matchcheckedonly"] = _gpod._Itdb_SPLPref_matchcheckedonly_set
    __swig_getmethods__["matchcheckedonly"] = _gpod._Itdb_SPLPref_matchcheckedonly_get
    if _newclass:matchcheckedonly = _swig_property(_gpod._Itdb_SPLPref_matchcheckedonly_get, _gpod._Itdb_SPLPref_matchcheckedonly_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_SPLPref_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_SPLPref_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_SPLPref_reserved_int1_get, _gpod._Itdb_SPLPref_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_SPLPref_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_SPLPref_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_SPLPref_reserved_int2_get, _gpod._Itdb_SPLPref_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_SPLPref_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_SPLPref_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_SPLPref_reserved1_get, _gpod._Itdb_SPLPref_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_SPLPref_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_SPLPref_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_SPLPref_reserved2_get, _gpod._Itdb_SPLPref_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_SPLPref"""
        this = _gpod.new__Itdb_SPLPref(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_SPLPref
    __del__ = lambda self : None;
_Itdb_SPLPref_swigregister = _gpod._Itdb_SPLPref_swigregister
_Itdb_SPLPref_swigregister(_Itdb_SPLPref)

class _Itdb_SPLRule(_object):
    """Proxy of C _Itdb_SPLRule struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_SPLRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_SPLRule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field"] = _gpod._Itdb_SPLRule_field_set
    __swig_getmethods__["field"] = _gpod._Itdb_SPLRule_field_get
    if _newclass:field = _swig_property(_gpod._Itdb_SPLRule_field_get, _gpod._Itdb_SPLRule_field_set)
    __swig_setmethods__["action"] = _gpod._Itdb_SPLRule_action_set
    __swig_getmethods__["action"] = _gpod._Itdb_SPLRule_action_get
    if _newclass:action = _swig_property(_gpod._Itdb_SPLRule_action_get, _gpod._Itdb_SPLRule_action_set)
    __swig_setmethods__["string"] = _gpod._Itdb_SPLRule_string_set
    __swig_getmethods__["string"] = _gpod._Itdb_SPLRule_string_get
    if _newclass:string = _swig_property(_gpod._Itdb_SPLRule_string_get, _gpod._Itdb_SPLRule_string_set)
    __swig_setmethods__["fromvalue"] = _gpod._Itdb_SPLRule_fromvalue_set
    __swig_getmethods__["fromvalue"] = _gpod._Itdb_SPLRule_fromvalue_get
    if _newclass:fromvalue = _swig_property(_gpod._Itdb_SPLRule_fromvalue_get, _gpod._Itdb_SPLRule_fromvalue_set)
    __swig_setmethods__["fromdate"] = _gpod._Itdb_SPLRule_fromdate_set
    __swig_getmethods__["fromdate"] = _gpod._Itdb_SPLRule_fromdate_get
    if _newclass:fromdate = _swig_property(_gpod._Itdb_SPLRule_fromdate_get, _gpod._Itdb_SPLRule_fromdate_set)
    __swig_setmethods__["fromunits"] = _gpod._Itdb_SPLRule_fromunits_set
    __swig_getmethods__["fromunits"] = _gpod._Itdb_SPLRule_fromunits_get
    if _newclass:fromunits = _swig_property(_gpod._Itdb_SPLRule_fromunits_get, _gpod._Itdb_SPLRule_fromunits_set)
    __swig_setmethods__["tovalue"] = _gpod._Itdb_SPLRule_tovalue_set
    __swig_getmethods__["tovalue"] = _gpod._Itdb_SPLRule_tovalue_get
    if _newclass:tovalue = _swig_property(_gpod._Itdb_SPLRule_tovalue_get, _gpod._Itdb_SPLRule_tovalue_set)
    __swig_setmethods__["todate"] = _gpod._Itdb_SPLRule_todate_set
    __swig_getmethods__["todate"] = _gpod._Itdb_SPLRule_todate_get
    if _newclass:todate = _swig_property(_gpod._Itdb_SPLRule_todate_get, _gpod._Itdb_SPLRule_todate_set)
    __swig_setmethods__["tounits"] = _gpod._Itdb_SPLRule_tounits_set
    __swig_getmethods__["tounits"] = _gpod._Itdb_SPLRule_tounits_get
    if _newclass:tounits = _swig_property(_gpod._Itdb_SPLRule_tounits_get, _gpod._Itdb_SPLRule_tounits_set)
    __swig_setmethods__["unk052"] = _gpod._Itdb_SPLRule_unk052_set
    __swig_getmethods__["unk052"] = _gpod._Itdb_SPLRule_unk052_get
    if _newclass:unk052 = _swig_property(_gpod._Itdb_SPLRule_unk052_get, _gpod._Itdb_SPLRule_unk052_set)
    __swig_setmethods__["unk056"] = _gpod._Itdb_SPLRule_unk056_set
    __swig_getmethods__["unk056"] = _gpod._Itdb_SPLRule_unk056_get
    if _newclass:unk056 = _swig_property(_gpod._Itdb_SPLRule_unk056_get, _gpod._Itdb_SPLRule_unk056_set)
    __swig_setmethods__["unk060"] = _gpod._Itdb_SPLRule_unk060_set
    __swig_getmethods__["unk060"] = _gpod._Itdb_SPLRule_unk060_get
    if _newclass:unk060 = _swig_property(_gpod._Itdb_SPLRule_unk060_get, _gpod._Itdb_SPLRule_unk060_set)
    __swig_setmethods__["unk064"] = _gpod._Itdb_SPLRule_unk064_set
    __swig_getmethods__["unk064"] = _gpod._Itdb_SPLRule_unk064_get
    if _newclass:unk064 = _swig_property(_gpod._Itdb_SPLRule_unk064_get, _gpod._Itdb_SPLRule_unk064_set)
    __swig_setmethods__["unk068"] = _gpod._Itdb_SPLRule_unk068_set
    __swig_getmethods__["unk068"] = _gpod._Itdb_SPLRule_unk068_get
    if _newclass:unk068 = _swig_property(_gpod._Itdb_SPLRule_unk068_get, _gpod._Itdb_SPLRule_unk068_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_SPLRule_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_SPLRule_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_SPLRule_reserved_int1_get, _gpod._Itdb_SPLRule_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_SPLRule_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_SPLRule_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_SPLRule_reserved_int2_get, _gpod._Itdb_SPLRule_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_SPLRule_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_SPLRule_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_SPLRule_reserved1_get, _gpod._Itdb_SPLRule_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_SPLRule_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_SPLRule_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_SPLRule_reserved2_get, _gpod._Itdb_SPLRule_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_SPLRule"""
        this = _gpod.new__Itdb_SPLRule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_SPLRule
    __del__ = lambda self : None;
_Itdb_SPLRule_swigregister = _gpod._Itdb_SPLRule_swigregister
_Itdb_SPLRule_swigregister(_Itdb_SPLRule)

class _Itdb_SPLRules(_object):
    """Proxy of C _Itdb_SPLRules struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_SPLRules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_SPLRules, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unk004"] = _gpod._Itdb_SPLRules_unk004_set
    __swig_getmethods__["unk004"] = _gpod._Itdb_SPLRules_unk004_get
    if _newclass:unk004 = _swig_property(_gpod._Itdb_SPLRules_unk004_get, _gpod._Itdb_SPLRules_unk004_set)
    __swig_setmethods__["match_operator"] = _gpod._Itdb_SPLRules_match_operator_set
    __swig_getmethods__["match_operator"] = _gpod._Itdb_SPLRules_match_operator_get
    if _newclass:match_operator = _swig_property(_gpod._Itdb_SPLRules_match_operator_get, _gpod._Itdb_SPLRules_match_operator_set)
    __swig_setmethods__["rules"] = _gpod._Itdb_SPLRules_rules_set
    __swig_getmethods__["rules"] = _gpod._Itdb_SPLRules_rules_get
    if _newclass:rules = _swig_property(_gpod._Itdb_SPLRules_rules_get, _gpod._Itdb_SPLRules_rules_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_SPLRules_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_SPLRules_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_SPLRules_reserved_int1_get, _gpod._Itdb_SPLRules_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_SPLRules_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_SPLRules_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_SPLRules_reserved_int2_get, _gpod._Itdb_SPLRules_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_SPLRules_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_SPLRules_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_SPLRules_reserved1_get, _gpod._Itdb_SPLRules_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_SPLRules_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_SPLRules_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_SPLRules_reserved2_get, _gpod._Itdb_SPLRules_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_SPLRules"""
        this = _gpod.new__Itdb_SPLRules(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_SPLRules
    __del__ = lambda self : None;
_Itdb_SPLRules_swigregister = _gpod._Itdb_SPLRules_swigregister
_Itdb_SPLRules_swigregister(_Itdb_SPLRules)

class _Itdb_Chapter(_object):
    """Proxy of C _Itdb_Chapter struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_Chapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_Chapter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startpos"] = _gpod._Itdb_Chapter_startpos_set
    __swig_getmethods__["startpos"] = _gpod._Itdb_Chapter_startpos_get
    if _newclass:startpos = _swig_property(_gpod._Itdb_Chapter_startpos_get, _gpod._Itdb_Chapter_startpos_set)
    __swig_setmethods__["chaptertitle"] = _gpod._Itdb_Chapter_chaptertitle_set
    __swig_getmethods__["chaptertitle"] = _gpod._Itdb_Chapter_chaptertitle_get
    if _newclass:chaptertitle = _swig_property(_gpod._Itdb_Chapter_chaptertitle_get, _gpod._Itdb_Chapter_chaptertitle_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_Chapter_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_Chapter_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_Chapter_reserved_int1_get, _gpod._Itdb_Chapter_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_Chapter_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_Chapter_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_Chapter_reserved_int2_get, _gpod._Itdb_Chapter_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_Chapter_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_Chapter_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_Chapter_reserved1_get, _gpod._Itdb_Chapter_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_Chapter_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_Chapter_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_Chapter_reserved2_get, _gpod._Itdb_Chapter_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_Chapter"""
        this = _gpod.new__Itdb_Chapter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_Chapter
    __del__ = lambda self : None;
_Itdb_Chapter_swigregister = _gpod._Itdb_Chapter_swigregister
_Itdb_Chapter_swigregister(_Itdb_Chapter)

class _Itdb_Chapterdata(_object):
    """Proxy of C _Itdb_Chapterdata struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_Chapterdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_Chapterdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chapters"] = _gpod._Itdb_Chapterdata_chapters_set
    __swig_getmethods__["chapters"] = _gpod._Itdb_Chapterdata_chapters_get
    if _newclass:chapters = _swig_property(_gpod._Itdb_Chapterdata_chapters_get, _gpod._Itdb_Chapterdata_chapters_set)
    __swig_setmethods__["unk024"] = _gpod._Itdb_Chapterdata_unk024_set
    __swig_getmethods__["unk024"] = _gpod._Itdb_Chapterdata_unk024_get
    if _newclass:unk024 = _swig_property(_gpod._Itdb_Chapterdata_unk024_get, _gpod._Itdb_Chapterdata_unk024_set)
    __swig_setmethods__["unk028"] = _gpod._Itdb_Chapterdata_unk028_set
    __swig_getmethods__["unk028"] = _gpod._Itdb_Chapterdata_unk028_get
    if _newclass:unk028 = _swig_property(_gpod._Itdb_Chapterdata_unk028_get, _gpod._Itdb_Chapterdata_unk028_set)
    __swig_setmethods__["unk032"] = _gpod._Itdb_Chapterdata_unk032_set
    __swig_getmethods__["unk032"] = _gpod._Itdb_Chapterdata_unk032_get
    if _newclass:unk032 = _swig_property(_gpod._Itdb_Chapterdata_unk032_get, _gpod._Itdb_Chapterdata_unk032_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_Chapterdata_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_Chapterdata_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_Chapterdata_reserved_int1_get, _gpod._Itdb_Chapterdata_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_Chapterdata_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_Chapterdata_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_Chapterdata_reserved_int2_get, _gpod._Itdb_Chapterdata_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_Chapterdata_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_Chapterdata_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_Chapterdata_reserved1_get, _gpod._Itdb_Chapterdata_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_Chapterdata_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_Chapterdata_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_Chapterdata_reserved2_get, _gpod._Itdb_Chapterdata_reserved2_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_Chapterdata"""
        this = _gpod.new__Itdb_Chapterdata(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_Chapterdata
    __del__ = lambda self : None;
_Itdb_Chapterdata_swigregister = _gpod._Itdb_Chapterdata_swigregister
_Itdb_Chapterdata_swigregister(_Itdb_Chapterdata)

ITDB_RATING_STEP = _gpod.ITDB_RATING_STEP
class _Itdb_Artwork(_object):
    """Proxy of C _Itdb_Artwork struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_Artwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_Artwork, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thumbnail"] = _gpod._Itdb_Artwork_thumbnail_set
    __swig_getmethods__["thumbnail"] = _gpod._Itdb_Artwork_thumbnail_get
    if _newclass:thumbnail = _swig_property(_gpod._Itdb_Artwork_thumbnail_get, _gpod._Itdb_Artwork_thumbnail_set)
    __swig_setmethods__["id"] = _gpod._Itdb_Artwork_id_set
    __swig_getmethods__["id"] = _gpod._Itdb_Artwork_id_get
    if _newclass:id = _swig_property(_gpod._Itdb_Artwork_id_get, _gpod._Itdb_Artwork_id_set)
    __swig_setmethods__["dbid"] = _gpod._Itdb_Artwork_dbid_set
    __swig_getmethods__["dbid"] = _gpod._Itdb_Artwork_dbid_get
    if _newclass:dbid = _swig_property(_gpod._Itdb_Artwork_dbid_get, _gpod._Itdb_Artwork_dbid_set)
    __swig_setmethods__["unk028"] = _gpod._Itdb_Artwork_unk028_set
    __swig_getmethods__["unk028"] = _gpod._Itdb_Artwork_unk028_get
    if _newclass:unk028 = _swig_property(_gpod._Itdb_Artwork_unk028_get, _gpod._Itdb_Artwork_unk028_set)
    __swig_setmethods__["rating"] = _gpod._Itdb_Artwork_rating_set
    __swig_getmethods__["rating"] = _gpod._Itdb_Artwork_rating_get
    if _newclass:rating = _swig_property(_gpod._Itdb_Artwork_rating_get, _gpod._Itdb_Artwork_rating_set)
    __swig_setmethods__["unk036"] = _gpod._Itdb_Artwork_unk036_set
    __swig_getmethods__["unk036"] = _gpod._Itdb_Artwork_unk036_get
    if _newclass:unk036 = _swig_property(_gpod._Itdb_Artwork_unk036_get, _gpod._Itdb_Artwork_unk036_set)
    __swig_setmethods__["creation_date"] = _gpod._Itdb_Artwork_creation_date_set
    __swig_getmethods__["creation_date"] = _gpod._Itdb_Artwork_creation_date_get
    if _newclass:creation_date = _swig_property(_gpod._Itdb_Artwork_creation_date_get, _gpod._Itdb_Artwork_creation_date_set)
    __swig_setmethods__["digitized_date"] = _gpod._Itdb_Artwork_digitized_date_set
    __swig_getmethods__["digitized_date"] = _gpod._Itdb_Artwork_digitized_date_get
    if _newclass:digitized_date = _swig_property(_gpod._Itdb_Artwork_digitized_date_get, _gpod._Itdb_Artwork_digitized_date_set)
    __swig_setmethods__["artwork_size"] = _gpod._Itdb_Artwork_artwork_size_set
    __swig_getmethods__["artwork_size"] = _gpod._Itdb_Artwork_artwork_size_get
    if _newclass:artwork_size = _swig_property(_gpod._Itdb_Artwork_artwork_size_get, _gpod._Itdb_Artwork_artwork_size_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_Artwork_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_Artwork_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_Artwork_reserved_int1_get, _gpod._Itdb_Artwork_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_Artwork_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_Artwork_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_Artwork_reserved_int2_get, _gpod._Itdb_Artwork_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_Artwork_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_Artwork_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_Artwork_reserved1_get, _gpod._Itdb_Artwork_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_Artwork_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_Artwork_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_Artwork_reserved2_get, _gpod._Itdb_Artwork_reserved2_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_Artwork_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_Artwork_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_Artwork_usertype_get, _gpod._Itdb_Artwork_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_Artwork_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_Artwork_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_Artwork_userdata_get, _gpod._Itdb_Artwork_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_Artwork_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_Artwork_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_Artwork_userdata_duplicate_get, _gpod._Itdb_Artwork_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_Artwork_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_Artwork_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_Artwork_userdata_destroy_get, _gpod._Itdb_Artwork_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_Artwork"""
        this = _gpod.new__Itdb_Artwork(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_Artwork
    __del__ = lambda self : None;
_Itdb_Artwork_swigregister = _gpod._Itdb_Artwork_swigregister
_Itdb_Artwork_swigregister(_Itdb_Artwork)

class _Itdb_PhotoDB(_object):
    """Proxy of C _Itdb_PhotoDB struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_PhotoDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_PhotoDB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["photos"] = _gpod._Itdb_PhotoDB_photos_set
    __swig_getmethods__["photos"] = _gpod._Itdb_PhotoDB_photos_get
    if _newclass:photos = _swig_property(_gpod._Itdb_PhotoDB_photos_get, _gpod._Itdb_PhotoDB_photos_set)
    __swig_setmethods__["photoalbums"] = _gpod._Itdb_PhotoDB_photoalbums_set
    __swig_getmethods__["photoalbums"] = _gpod._Itdb_PhotoDB_photoalbums_get
    if _newclass:photoalbums = _swig_property(_gpod._Itdb_PhotoDB_photoalbums_get, _gpod._Itdb_PhotoDB_photoalbums_set)
    __swig_setmethods__["device"] = _gpod._Itdb_PhotoDB_device_set
    __swig_getmethods__["device"] = _gpod._Itdb_PhotoDB_device_get
    if _newclass:device = _swig_property(_gpod._Itdb_PhotoDB_device_get, _gpod._Itdb_PhotoDB_device_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_PhotoDB_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_PhotoDB_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_PhotoDB_reserved_int1_get, _gpod._Itdb_PhotoDB_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_PhotoDB_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_PhotoDB_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_PhotoDB_reserved_int2_get, _gpod._Itdb_PhotoDB_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_PhotoDB_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_PhotoDB_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_PhotoDB_reserved1_get, _gpod._Itdb_PhotoDB_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_PhotoDB_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_PhotoDB_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_PhotoDB_reserved2_get, _gpod._Itdb_PhotoDB_reserved2_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_PhotoDB_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_PhotoDB_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_PhotoDB_usertype_get, _gpod._Itdb_PhotoDB_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_PhotoDB_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_PhotoDB_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_PhotoDB_userdata_get, _gpod._Itdb_PhotoDB_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_PhotoDB_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_PhotoDB_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_PhotoDB_userdata_duplicate_get, _gpod._Itdb_PhotoDB_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_PhotoDB_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_PhotoDB_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_PhotoDB_userdata_destroy_get, _gpod._Itdb_PhotoDB_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_PhotoDB"""
        this = _gpod.new__Itdb_PhotoDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_PhotoDB
    __del__ = lambda self : None;
_Itdb_PhotoDB_swigregister = _gpod._Itdb_PhotoDB_swigregister
_Itdb_PhotoDB_swigregister(_Itdb_PhotoDB)

class _Itdb_iTunesDB(_object):
    """Proxy of C _Itdb_iTunesDB struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_iTunesDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_iTunesDB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tracks"] = _gpod._Itdb_iTunesDB_tracks_set
    __swig_getmethods__["tracks"] = _gpod._Itdb_iTunesDB_tracks_get
    if _newclass:tracks = _swig_property(_gpod._Itdb_iTunesDB_tracks_get, _gpod._Itdb_iTunesDB_tracks_set)
    __swig_setmethods__["playlists"] = _gpod._Itdb_iTunesDB_playlists_set
    __swig_getmethods__["playlists"] = _gpod._Itdb_iTunesDB_playlists_get
    if _newclass:playlists = _swig_property(_gpod._Itdb_iTunesDB_playlists_get, _gpod._Itdb_iTunesDB_playlists_set)
    __swig_setmethods__["filename"] = _gpod._Itdb_iTunesDB_filename_set
    __swig_getmethods__["filename"] = _gpod._Itdb_iTunesDB_filename_get
    if _newclass:filename = _swig_property(_gpod._Itdb_iTunesDB_filename_get, _gpod._Itdb_iTunesDB_filename_set)
    __swig_setmethods__["device"] = _gpod._Itdb_iTunesDB_device_set
    __swig_getmethods__["device"] = _gpod._Itdb_iTunesDB_device_get
    if _newclass:device = _swig_property(_gpod._Itdb_iTunesDB_device_get, _gpod._Itdb_iTunesDB_device_set)
    __swig_setmethods__["version"] = _gpod._Itdb_iTunesDB_version_set
    __swig_getmethods__["version"] = _gpod._Itdb_iTunesDB_version_get
    if _newclass:version = _swig_property(_gpod._Itdb_iTunesDB_version_get, _gpod._Itdb_iTunesDB_version_set)
    __swig_setmethods__["id"] = _gpod._Itdb_iTunesDB_id_set
    __swig_getmethods__["id"] = _gpod._Itdb_iTunesDB_id_get
    if _newclass:id = _swig_property(_gpod._Itdb_iTunesDB_id_get, _gpod._Itdb_iTunesDB_id_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_iTunesDB_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_iTunesDB_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_iTunesDB_reserved_int1_get, _gpod._Itdb_iTunesDB_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_iTunesDB_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_iTunesDB_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_iTunesDB_reserved_int2_get, _gpod._Itdb_iTunesDB_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_iTunesDB_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_iTunesDB_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_iTunesDB_reserved1_get, _gpod._Itdb_iTunesDB_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_iTunesDB_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_iTunesDB_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_iTunesDB_reserved2_get, _gpod._Itdb_iTunesDB_reserved2_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_iTunesDB_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_iTunesDB_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_iTunesDB_usertype_get, _gpod._Itdb_iTunesDB_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_iTunesDB_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_iTunesDB_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_iTunesDB_userdata_get, _gpod._Itdb_iTunesDB_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_iTunesDB_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_iTunesDB_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_iTunesDB_userdata_duplicate_get, _gpod._Itdb_iTunesDB_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_iTunesDB_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_iTunesDB_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_iTunesDB_userdata_destroy_get, _gpod._Itdb_iTunesDB_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_iTunesDB"""
        this = _gpod.new__Itdb_iTunesDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_iTunesDB
    __del__ = lambda self : None;
_Itdb_iTunesDB_swigregister = _gpod._Itdb_iTunesDB_swigregister
_Itdb_iTunesDB_swigregister(_Itdb_iTunesDB)

class _Itdb_PhotoAlbum(_object):
    """Proxy of C _Itdb_PhotoAlbum struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_PhotoAlbum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_PhotoAlbum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["photodb"] = _gpod._Itdb_PhotoAlbum_photodb_set
    __swig_getmethods__["photodb"] = _gpod._Itdb_PhotoAlbum_photodb_get
    if _newclass:photodb = _swig_property(_gpod._Itdb_PhotoAlbum_photodb_get, _gpod._Itdb_PhotoAlbum_photodb_set)
    __swig_setmethods__["name"] = _gpod._Itdb_PhotoAlbum_name_set
    __swig_getmethods__["name"] = _gpod._Itdb_PhotoAlbum_name_get
    if _newclass:name = _swig_property(_gpod._Itdb_PhotoAlbum_name_get, _gpod._Itdb_PhotoAlbum_name_set)
    __swig_setmethods__["members"] = _gpod._Itdb_PhotoAlbum_members_set
    __swig_getmethods__["members"] = _gpod._Itdb_PhotoAlbum_members_get
    if _newclass:members = _swig_property(_gpod._Itdb_PhotoAlbum_members_get, _gpod._Itdb_PhotoAlbum_members_set)
    __swig_setmethods__["album_type"] = _gpod._Itdb_PhotoAlbum_album_type_set
    __swig_getmethods__["album_type"] = _gpod._Itdb_PhotoAlbum_album_type_get
    if _newclass:album_type = _swig_property(_gpod._Itdb_PhotoAlbum_album_type_get, _gpod._Itdb_PhotoAlbum_album_type_set)
    __swig_setmethods__["playmusic"] = _gpod._Itdb_PhotoAlbum_playmusic_set
    __swig_getmethods__["playmusic"] = _gpod._Itdb_PhotoAlbum_playmusic_get
    if _newclass:playmusic = _swig_property(_gpod._Itdb_PhotoAlbum_playmusic_get, _gpod._Itdb_PhotoAlbum_playmusic_set)
    __swig_setmethods__["repeat"] = _gpod._Itdb_PhotoAlbum_repeat_set
    __swig_getmethods__["repeat"] = _gpod._Itdb_PhotoAlbum_repeat_get
    if _newclass:repeat = _swig_property(_gpod._Itdb_PhotoAlbum_repeat_get, _gpod._Itdb_PhotoAlbum_repeat_set)
    __swig_setmethods__["random"] = _gpod._Itdb_PhotoAlbum_random_set
    __swig_getmethods__["random"] = _gpod._Itdb_PhotoAlbum_random_get
    if _newclass:random = _swig_property(_gpod._Itdb_PhotoAlbum_random_get, _gpod._Itdb_PhotoAlbum_random_set)
    __swig_setmethods__["show_titles"] = _gpod._Itdb_PhotoAlbum_show_titles_set
    __swig_getmethods__["show_titles"] = _gpod._Itdb_PhotoAlbum_show_titles_get
    if _newclass:show_titles = _swig_property(_gpod._Itdb_PhotoAlbum_show_titles_get, _gpod._Itdb_PhotoAlbum_show_titles_set)
    __swig_setmethods__["transition_direction"] = _gpod._Itdb_PhotoAlbum_transition_direction_set
    __swig_getmethods__["transition_direction"] = _gpod._Itdb_PhotoAlbum_transition_direction_get
    if _newclass:transition_direction = _swig_property(_gpod._Itdb_PhotoAlbum_transition_direction_get, _gpod._Itdb_PhotoAlbum_transition_direction_set)
    __swig_setmethods__["slide_duration"] = _gpod._Itdb_PhotoAlbum_slide_duration_set
    __swig_getmethods__["slide_duration"] = _gpod._Itdb_PhotoAlbum_slide_duration_get
    if _newclass:slide_duration = _swig_property(_gpod._Itdb_PhotoAlbum_slide_duration_get, _gpod._Itdb_PhotoAlbum_slide_duration_set)
    __swig_setmethods__["transition_duration"] = _gpod._Itdb_PhotoAlbum_transition_duration_set
    __swig_getmethods__["transition_duration"] = _gpod._Itdb_PhotoAlbum_transition_duration_get
    if _newclass:transition_duration = _swig_property(_gpod._Itdb_PhotoAlbum_transition_duration_get, _gpod._Itdb_PhotoAlbum_transition_duration_set)
    __swig_setmethods__["song_id"] = _gpod._Itdb_PhotoAlbum_song_id_set
    __swig_getmethods__["song_id"] = _gpod._Itdb_PhotoAlbum_song_id_get
    if _newclass:song_id = _swig_property(_gpod._Itdb_PhotoAlbum_song_id_get, _gpod._Itdb_PhotoAlbum_song_id_set)
    __swig_setmethods__["unk024"] = _gpod._Itdb_PhotoAlbum_unk024_set
    __swig_getmethods__["unk024"] = _gpod._Itdb_PhotoAlbum_unk024_get
    if _newclass:unk024 = _swig_property(_gpod._Itdb_PhotoAlbum_unk024_get, _gpod._Itdb_PhotoAlbum_unk024_set)
    __swig_setmethods__["unk028"] = _gpod._Itdb_PhotoAlbum_unk028_set
    __swig_getmethods__["unk028"] = _gpod._Itdb_PhotoAlbum_unk028_get
    if _newclass:unk028 = _swig_property(_gpod._Itdb_PhotoAlbum_unk028_get, _gpod._Itdb_PhotoAlbum_unk028_set)
    __swig_setmethods__["unk044"] = _gpod._Itdb_PhotoAlbum_unk044_set
    __swig_getmethods__["unk044"] = _gpod._Itdb_PhotoAlbum_unk044_get
    if _newclass:unk044 = _swig_property(_gpod._Itdb_PhotoAlbum_unk044_get, _gpod._Itdb_PhotoAlbum_unk044_set)
    __swig_setmethods__["unk048"] = _gpod._Itdb_PhotoAlbum_unk048_set
    __swig_getmethods__["unk048"] = _gpod._Itdb_PhotoAlbum_unk048_get
    if _newclass:unk048 = _swig_property(_gpod._Itdb_PhotoAlbum_unk048_get, _gpod._Itdb_PhotoAlbum_unk048_set)
    __swig_setmethods__["album_id"] = _gpod._Itdb_PhotoAlbum_album_id_set
    __swig_getmethods__["album_id"] = _gpod._Itdb_PhotoAlbum_album_id_get
    if _newclass:album_id = _swig_property(_gpod._Itdb_PhotoAlbum_album_id_get, _gpod._Itdb_PhotoAlbum_album_id_set)
    __swig_setmethods__["prev_album_id"] = _gpod._Itdb_PhotoAlbum_prev_album_id_set
    __swig_getmethods__["prev_album_id"] = _gpod._Itdb_PhotoAlbum_prev_album_id_get
    if _newclass:prev_album_id = _swig_property(_gpod._Itdb_PhotoAlbum_prev_album_id_get, _gpod._Itdb_PhotoAlbum_prev_album_id_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_PhotoAlbum_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_PhotoAlbum_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_PhotoAlbum_reserved_int1_get, _gpod._Itdb_PhotoAlbum_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_PhotoAlbum_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_PhotoAlbum_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_PhotoAlbum_reserved_int2_get, _gpod._Itdb_PhotoAlbum_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_PhotoAlbum_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_PhotoAlbum_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_PhotoAlbum_reserved1_get, _gpod._Itdb_PhotoAlbum_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_PhotoAlbum_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_PhotoAlbum_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_PhotoAlbum_reserved2_get, _gpod._Itdb_PhotoAlbum_reserved2_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_PhotoAlbum_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_PhotoAlbum_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_PhotoAlbum_usertype_get, _gpod._Itdb_PhotoAlbum_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_PhotoAlbum_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_PhotoAlbum_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_PhotoAlbum_userdata_get, _gpod._Itdb_PhotoAlbum_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_PhotoAlbum_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_PhotoAlbum_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_PhotoAlbum_userdata_duplicate_get, _gpod._Itdb_PhotoAlbum_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_PhotoAlbum_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_PhotoAlbum_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_PhotoAlbum_userdata_destroy_get, _gpod._Itdb_PhotoAlbum_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_PhotoAlbum"""
        this = _gpod.new__Itdb_PhotoAlbum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_PhotoAlbum
    __del__ = lambda self : None;
_Itdb_PhotoAlbum_swigregister = _gpod._Itdb_PhotoAlbum_swigregister
_Itdb_PhotoAlbum_swigregister(_Itdb_PhotoAlbum)

class _Itdb_Playlist(_object):
    """Proxy of C _Itdb_Playlist struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_Playlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_Playlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["itdb"] = _gpod._Itdb_Playlist_itdb_set
    __swig_getmethods__["itdb"] = _gpod._Itdb_Playlist_itdb_get
    if _newclass:itdb = _swig_property(_gpod._Itdb_Playlist_itdb_get, _gpod._Itdb_Playlist_itdb_set)
    __swig_setmethods__["name"] = _gpod._Itdb_Playlist_name_set
    __swig_getmethods__["name"] = _gpod._Itdb_Playlist_name_get
    if _newclass:name = _swig_property(_gpod._Itdb_Playlist_name_get, _gpod._Itdb_Playlist_name_set)
    __swig_setmethods__["type"] = _gpod._Itdb_Playlist_type_set
    __swig_getmethods__["type"] = _gpod._Itdb_Playlist_type_get
    if _newclass:type = _swig_property(_gpod._Itdb_Playlist_type_get, _gpod._Itdb_Playlist_type_set)
    __swig_setmethods__["flag1"] = _gpod._Itdb_Playlist_flag1_set
    __swig_getmethods__["flag1"] = _gpod._Itdb_Playlist_flag1_get
    if _newclass:flag1 = _swig_property(_gpod._Itdb_Playlist_flag1_get, _gpod._Itdb_Playlist_flag1_set)
    __swig_setmethods__["flag2"] = _gpod._Itdb_Playlist_flag2_set
    __swig_getmethods__["flag2"] = _gpod._Itdb_Playlist_flag2_get
    if _newclass:flag2 = _swig_property(_gpod._Itdb_Playlist_flag2_get, _gpod._Itdb_Playlist_flag2_set)
    __swig_setmethods__["flag3"] = _gpod._Itdb_Playlist_flag3_set
    __swig_getmethods__["flag3"] = _gpod._Itdb_Playlist_flag3_get
    if _newclass:flag3 = _swig_property(_gpod._Itdb_Playlist_flag3_get, _gpod._Itdb_Playlist_flag3_set)
    __swig_setmethods__["num"] = _gpod._Itdb_Playlist_num_set
    __swig_getmethods__["num"] = _gpod._Itdb_Playlist_num_get
    if _newclass:num = _swig_property(_gpod._Itdb_Playlist_num_get, _gpod._Itdb_Playlist_num_set)
    __swig_setmethods__["members"] = _gpod._Itdb_Playlist_members_set
    __swig_getmethods__["members"] = _gpod._Itdb_Playlist_members_get
    if _newclass:members = _swig_property(_gpod._Itdb_Playlist_members_get, _gpod._Itdb_Playlist_members_set)
    __swig_setmethods__["is_spl"] = _gpod._Itdb_Playlist_is_spl_set
    __swig_getmethods__["is_spl"] = _gpod._Itdb_Playlist_is_spl_get
    if _newclass:is_spl = _swig_property(_gpod._Itdb_Playlist_is_spl_get, _gpod._Itdb_Playlist_is_spl_set)
    __swig_setmethods__["timestamp"] = _gpod._Itdb_Playlist_timestamp_set
    __swig_getmethods__["timestamp"] = _gpod._Itdb_Playlist_timestamp_get
    if _newclass:timestamp = _swig_property(_gpod._Itdb_Playlist_timestamp_get, _gpod._Itdb_Playlist_timestamp_set)
    __swig_setmethods__["id"] = _gpod._Itdb_Playlist_id_set
    __swig_getmethods__["id"] = _gpod._Itdb_Playlist_id_get
    if _newclass:id = _swig_property(_gpod._Itdb_Playlist_id_get, _gpod._Itdb_Playlist_id_set)
    __swig_setmethods__["sortorder"] = _gpod._Itdb_Playlist_sortorder_set
    __swig_getmethods__["sortorder"] = _gpod._Itdb_Playlist_sortorder_get
    if _newclass:sortorder = _swig_property(_gpod._Itdb_Playlist_sortorder_get, _gpod._Itdb_Playlist_sortorder_set)
    __swig_setmethods__["podcastflag"] = _gpod._Itdb_Playlist_podcastflag_set
    __swig_getmethods__["podcastflag"] = _gpod._Itdb_Playlist_podcastflag_get
    if _newclass:podcastflag = _swig_property(_gpod._Itdb_Playlist_podcastflag_get, _gpod._Itdb_Playlist_podcastflag_set)
    __swig_setmethods__["splpref"] = _gpod._Itdb_Playlist_splpref_set
    __swig_getmethods__["splpref"] = _gpod._Itdb_Playlist_splpref_get
    if _newclass:splpref = _swig_property(_gpod._Itdb_Playlist_splpref_get, _gpod._Itdb_Playlist_splpref_set)
    __swig_setmethods__["splrules"] = _gpod._Itdb_Playlist_splrules_set
    __swig_getmethods__["splrules"] = _gpod._Itdb_Playlist_splrules_get
    if _newclass:splrules = _swig_property(_gpod._Itdb_Playlist_splrules_get, _gpod._Itdb_Playlist_splrules_set)
    __swig_setmethods__["reserved100"] = _gpod._Itdb_Playlist_reserved100_set
    __swig_getmethods__["reserved100"] = _gpod._Itdb_Playlist_reserved100_get
    if _newclass:reserved100 = _swig_property(_gpod._Itdb_Playlist_reserved100_get, _gpod._Itdb_Playlist_reserved100_set)
    __swig_setmethods__["reserved101"] = _gpod._Itdb_Playlist_reserved101_set
    __swig_getmethods__["reserved101"] = _gpod._Itdb_Playlist_reserved101_get
    if _newclass:reserved101 = _swig_property(_gpod._Itdb_Playlist_reserved101_get, _gpod._Itdb_Playlist_reserved101_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_Playlist_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_Playlist_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_Playlist_reserved_int1_get, _gpod._Itdb_Playlist_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_Playlist_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_Playlist_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_Playlist_reserved_int2_get, _gpod._Itdb_Playlist_reserved_int2_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_Playlist_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_Playlist_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_Playlist_reserved1_get, _gpod._Itdb_Playlist_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_Playlist_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_Playlist_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_Playlist_reserved2_get, _gpod._Itdb_Playlist_reserved2_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_Playlist_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_Playlist_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_Playlist_usertype_get, _gpod._Itdb_Playlist_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_Playlist_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_Playlist_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_Playlist_userdata_get, _gpod._Itdb_Playlist_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_Playlist_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_Playlist_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_Playlist_userdata_duplicate_get, _gpod._Itdb_Playlist_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_Playlist_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_Playlist_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_Playlist_userdata_destroy_get, _gpod._Itdb_Playlist_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_Playlist"""
        this = _gpod.new__Itdb_Playlist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_Playlist
    __del__ = lambda self : None;
_Itdb_Playlist_swigregister = _gpod._Itdb_Playlist_swigregister
_Itdb_Playlist_swigregister(_Itdb_Playlist)

ITDB_PSO_MANUAL = _gpod.ITDB_PSO_MANUAL
ITDB_PSO_TITLE = _gpod.ITDB_PSO_TITLE
ITDB_PSO_ALBUM = _gpod.ITDB_PSO_ALBUM
ITDB_PSO_ARTIST = _gpod.ITDB_PSO_ARTIST
ITDB_PSO_BIRATE = _gpod.ITDB_PSO_BIRATE
ITDB_PSO_GENRE = _gpod.ITDB_PSO_GENRE
ITDB_PSO_FILETYPE = _gpod.ITDB_PSO_FILETYPE
ITDB_PSO_TIME_MODIFIED = _gpod.ITDB_PSO_TIME_MODIFIED
ITDB_PSO_TRACK_NR = _gpod.ITDB_PSO_TRACK_NR
ITDB_PSO_SIZE = _gpod.ITDB_PSO_SIZE
ITDB_PSO_TIME = _gpod.ITDB_PSO_TIME
ITDB_PSO_YEAR = _gpod.ITDB_PSO_YEAR
ITDB_PSO_SAMPLERATE = _gpod.ITDB_PSO_SAMPLERATE
ITDB_PSO_COMMENT = _gpod.ITDB_PSO_COMMENT
ITDB_PSO_TIME_ADDED = _gpod.ITDB_PSO_TIME_ADDED
ITDB_PSO_EQUALIZER = _gpod.ITDB_PSO_EQUALIZER
ITDB_PSO_COMPOSER = _gpod.ITDB_PSO_COMPOSER
ITDB_PSO_PLAYCOUNT = _gpod.ITDB_PSO_PLAYCOUNT
ITDB_PSO_TIME_PLAYED = _gpod.ITDB_PSO_TIME_PLAYED
ITDB_PSO_CD_NR = _gpod.ITDB_PSO_CD_NR
ITDB_PSO_RATING = _gpod.ITDB_PSO_RATING
ITDB_PSO_RELEASE_DATE = _gpod.ITDB_PSO_RELEASE_DATE
ITDB_PSO_BPM = _gpod.ITDB_PSO_BPM
ITDB_PSO_GROUPING = _gpod.ITDB_PSO_GROUPING
ITDB_PSO_CATEGORY = _gpod.ITDB_PSO_CATEGORY
ITDB_PSO_DESCRIPTION = _gpod.ITDB_PSO_DESCRIPTION
ITDB_MEDIATYPE_AUDIO = _gpod.ITDB_MEDIATYPE_AUDIO
ITDB_MEDIATYPE_MOVIE = _gpod.ITDB_MEDIATYPE_MOVIE
ITDB_MEDIATYPE_PODCAST = _gpod.ITDB_MEDIATYPE_PODCAST
ITDB_MEDIATYPE_AUDIOBOOK = _gpod.ITDB_MEDIATYPE_AUDIOBOOK
ITDB_MEDIATYPE_MUSICVIDEO = _gpod.ITDB_MEDIATYPE_MUSICVIDEO
ITDB_MEDIATYPE_TVSHOW = _gpod.ITDB_MEDIATYPE_TVSHOW
class _Itdb_Track(_object):
    """Proxy of C _Itdb_Track struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Itdb_Track, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Itdb_Track, name)
    __repr__ = _swig_repr
    __swig_setmethods__["itdb"] = _gpod._Itdb_Track_itdb_set
    __swig_getmethods__["itdb"] = _gpod._Itdb_Track_itdb_get
    if _newclass:itdb = _swig_property(_gpod._Itdb_Track_itdb_get, _gpod._Itdb_Track_itdb_set)
    __swig_setmethods__["title"] = _gpod._Itdb_Track_title_set
    __swig_getmethods__["title"] = _gpod._Itdb_Track_title_get
    if _newclass:title = _swig_property(_gpod._Itdb_Track_title_get, _gpod._Itdb_Track_title_set)
    __swig_setmethods__["ipod_path"] = _gpod._Itdb_Track_ipod_path_set
    __swig_getmethods__["ipod_path"] = _gpod._Itdb_Track_ipod_path_get
    if _newclass:ipod_path = _swig_property(_gpod._Itdb_Track_ipod_path_get, _gpod._Itdb_Track_ipod_path_set)
    __swig_setmethods__["album"] = _gpod._Itdb_Track_album_set
    __swig_getmethods__["album"] = _gpod._Itdb_Track_album_get
    if _newclass:album = _swig_property(_gpod._Itdb_Track_album_get, _gpod._Itdb_Track_album_set)
    __swig_setmethods__["artist"] = _gpod._Itdb_Track_artist_set
    __swig_getmethods__["artist"] = _gpod._Itdb_Track_artist_get
    if _newclass:artist = _swig_property(_gpod._Itdb_Track_artist_get, _gpod._Itdb_Track_artist_set)
    __swig_setmethods__["genre"] = _gpod._Itdb_Track_genre_set
    __swig_getmethods__["genre"] = _gpod._Itdb_Track_genre_get
    if _newclass:genre = _swig_property(_gpod._Itdb_Track_genre_get, _gpod._Itdb_Track_genre_set)
    __swig_setmethods__["filetype"] = _gpod._Itdb_Track_filetype_set
    __swig_getmethods__["filetype"] = _gpod._Itdb_Track_filetype_get
    if _newclass:filetype = _swig_property(_gpod._Itdb_Track_filetype_get, _gpod._Itdb_Track_filetype_set)
    __swig_setmethods__["comment"] = _gpod._Itdb_Track_comment_set
    __swig_getmethods__["comment"] = _gpod._Itdb_Track_comment_get
    if _newclass:comment = _swig_property(_gpod._Itdb_Track_comment_get, _gpod._Itdb_Track_comment_set)
    __swig_setmethods__["category"] = _gpod._Itdb_Track_category_set
    __swig_getmethods__["category"] = _gpod._Itdb_Track_category_get
    if _newclass:category = _swig_property(_gpod._Itdb_Track_category_get, _gpod._Itdb_Track_category_set)
    __swig_setmethods__["composer"] = _gpod._Itdb_Track_composer_set
    __swig_getmethods__["composer"] = _gpod._Itdb_Track_composer_get
    if _newclass:composer = _swig_property(_gpod._Itdb_Track_composer_get, _gpod._Itdb_Track_composer_set)
    __swig_setmethods__["grouping"] = _gpod._Itdb_Track_grouping_set
    __swig_getmethods__["grouping"] = _gpod._Itdb_Track_grouping_get
    if _newclass:grouping = _swig_property(_gpod._Itdb_Track_grouping_get, _gpod._Itdb_Track_grouping_set)
    __swig_setmethods__["description"] = _gpod._Itdb_Track_description_set
    __swig_getmethods__["description"] = _gpod._Itdb_Track_description_get
    if _newclass:description = _swig_property(_gpod._Itdb_Track_description_get, _gpod._Itdb_Track_description_set)
    __swig_setmethods__["podcasturl"] = _gpod._Itdb_Track_podcasturl_set
    __swig_getmethods__["podcasturl"] = _gpod._Itdb_Track_podcasturl_get
    if _newclass:podcasturl = _swig_property(_gpod._Itdb_Track_podcasturl_get, _gpod._Itdb_Track_podcasturl_set)
    __swig_setmethods__["podcastrss"] = _gpod._Itdb_Track_podcastrss_set
    __swig_getmethods__["podcastrss"] = _gpod._Itdb_Track_podcastrss_get
    if _newclass:podcastrss = _swig_property(_gpod._Itdb_Track_podcastrss_get, _gpod._Itdb_Track_podcastrss_set)
    __swig_setmethods__["chapterdata"] = _gpod._Itdb_Track_chapterdata_set
    __swig_getmethods__["chapterdata"] = _gpod._Itdb_Track_chapterdata_get
    if _newclass:chapterdata = _swig_property(_gpod._Itdb_Track_chapterdata_get, _gpod._Itdb_Track_chapterdata_set)
    __swig_setmethods__["subtitle"] = _gpod._Itdb_Track_subtitle_set
    __swig_getmethods__["subtitle"] = _gpod._Itdb_Track_subtitle_get
    if _newclass:subtitle = _swig_property(_gpod._Itdb_Track_subtitle_get, _gpod._Itdb_Track_subtitle_set)
    __swig_setmethods__["tvshow"] = _gpod._Itdb_Track_tvshow_set
    __swig_getmethods__["tvshow"] = _gpod._Itdb_Track_tvshow_get
    if _newclass:tvshow = _swig_property(_gpod._Itdb_Track_tvshow_get, _gpod._Itdb_Track_tvshow_set)
    __swig_setmethods__["tvepisode"] = _gpod._Itdb_Track_tvepisode_set
    __swig_getmethods__["tvepisode"] = _gpod._Itdb_Track_tvepisode_get
    if _newclass:tvepisode = _swig_property(_gpod._Itdb_Track_tvepisode_get, _gpod._Itdb_Track_tvepisode_set)
    __swig_setmethods__["tvnetwork"] = _gpod._Itdb_Track_tvnetwork_set
    __swig_getmethods__["tvnetwork"] = _gpod._Itdb_Track_tvnetwork_get
    if _newclass:tvnetwork = _swig_property(_gpod._Itdb_Track_tvnetwork_get, _gpod._Itdb_Track_tvnetwork_set)
    __swig_setmethods__["albumartist"] = _gpod._Itdb_Track_albumartist_set
    __swig_getmethods__["albumartist"] = _gpod._Itdb_Track_albumartist_get
    if _newclass:albumartist = _swig_property(_gpod._Itdb_Track_albumartist_get, _gpod._Itdb_Track_albumartist_set)
    __swig_setmethods__["keywords"] = _gpod._Itdb_Track_keywords_set
    __swig_getmethods__["keywords"] = _gpod._Itdb_Track_keywords_get
    if _newclass:keywords = _swig_property(_gpod._Itdb_Track_keywords_get, _gpod._Itdb_Track_keywords_set)
    __swig_setmethods__["sort_artist"] = _gpod._Itdb_Track_sort_artist_set
    __swig_getmethods__["sort_artist"] = _gpod._Itdb_Track_sort_artist_get
    if _newclass:sort_artist = _swig_property(_gpod._Itdb_Track_sort_artist_get, _gpod._Itdb_Track_sort_artist_set)
    __swig_setmethods__["sort_title"] = _gpod._Itdb_Track_sort_title_set
    __swig_getmethods__["sort_title"] = _gpod._Itdb_Track_sort_title_get
    if _newclass:sort_title = _swig_property(_gpod._Itdb_Track_sort_title_get, _gpod._Itdb_Track_sort_title_set)
    __swig_setmethods__["sort_album"] = _gpod._Itdb_Track_sort_album_set
    __swig_getmethods__["sort_album"] = _gpod._Itdb_Track_sort_album_get
    if _newclass:sort_album = _swig_property(_gpod._Itdb_Track_sort_album_get, _gpod._Itdb_Track_sort_album_set)
    __swig_setmethods__["sort_albumartist"] = _gpod._Itdb_Track_sort_albumartist_set
    __swig_getmethods__["sort_albumartist"] = _gpod._Itdb_Track_sort_albumartist_get
    if _newclass:sort_albumartist = _swig_property(_gpod._Itdb_Track_sort_albumartist_get, _gpod._Itdb_Track_sort_albumartist_set)
    __swig_setmethods__["sort_composer"] = _gpod._Itdb_Track_sort_composer_set
    __swig_getmethods__["sort_composer"] = _gpod._Itdb_Track_sort_composer_get
    if _newclass:sort_composer = _swig_property(_gpod._Itdb_Track_sort_composer_get, _gpod._Itdb_Track_sort_composer_set)
    __swig_setmethods__["sort_tvshow"] = _gpod._Itdb_Track_sort_tvshow_set
    __swig_getmethods__["sort_tvshow"] = _gpod._Itdb_Track_sort_tvshow_get
    if _newclass:sort_tvshow = _swig_property(_gpod._Itdb_Track_sort_tvshow_get, _gpod._Itdb_Track_sort_tvshow_set)
    __swig_setmethods__["id"] = _gpod._Itdb_Track_id_set
    __swig_getmethods__["id"] = _gpod._Itdb_Track_id_get
    if _newclass:id = _swig_property(_gpod._Itdb_Track_id_get, _gpod._Itdb_Track_id_set)
    __swig_setmethods__["size"] = _gpod._Itdb_Track_size_set
    __swig_getmethods__["size"] = _gpod._Itdb_Track_size_get
    if _newclass:size = _swig_property(_gpod._Itdb_Track_size_get, _gpod._Itdb_Track_size_set)
    __swig_setmethods__["tracklen"] = _gpod._Itdb_Track_tracklen_set
    __swig_getmethods__["tracklen"] = _gpod._Itdb_Track_tracklen_get
    if _newclass:tracklen = _swig_property(_gpod._Itdb_Track_tracklen_get, _gpod._Itdb_Track_tracklen_set)
    __swig_setmethods__["cd_nr"] = _gpod._Itdb_Track_cd_nr_set
    __swig_getmethods__["cd_nr"] = _gpod._Itdb_Track_cd_nr_get
    if _newclass:cd_nr = _swig_property(_gpod._Itdb_Track_cd_nr_get, _gpod._Itdb_Track_cd_nr_set)
    __swig_setmethods__["cds"] = _gpod._Itdb_Track_cds_set
    __swig_getmethods__["cds"] = _gpod._Itdb_Track_cds_get
    if _newclass:cds = _swig_property(_gpod._Itdb_Track_cds_get, _gpod._Itdb_Track_cds_set)
    __swig_setmethods__["track_nr"] = _gpod._Itdb_Track_track_nr_set
    __swig_getmethods__["track_nr"] = _gpod._Itdb_Track_track_nr_get
    if _newclass:track_nr = _swig_property(_gpod._Itdb_Track_track_nr_get, _gpod._Itdb_Track_track_nr_set)
    __swig_setmethods__["tracks"] = _gpod._Itdb_Track_tracks_set
    __swig_getmethods__["tracks"] = _gpod._Itdb_Track_tracks_get
    if _newclass:tracks = _swig_property(_gpod._Itdb_Track_tracks_get, _gpod._Itdb_Track_tracks_set)
    __swig_setmethods__["bitrate"] = _gpod._Itdb_Track_bitrate_set
    __swig_getmethods__["bitrate"] = _gpod._Itdb_Track_bitrate_get
    if _newclass:bitrate = _swig_property(_gpod._Itdb_Track_bitrate_get, _gpod._Itdb_Track_bitrate_set)
    __swig_setmethods__["samplerate"] = _gpod._Itdb_Track_samplerate_set
    __swig_getmethods__["samplerate"] = _gpod._Itdb_Track_samplerate_get
    if _newclass:samplerate = _swig_property(_gpod._Itdb_Track_samplerate_get, _gpod._Itdb_Track_samplerate_set)
    __swig_setmethods__["samplerate_low"] = _gpod._Itdb_Track_samplerate_low_set
    __swig_getmethods__["samplerate_low"] = _gpod._Itdb_Track_samplerate_low_get
    if _newclass:samplerate_low = _swig_property(_gpod._Itdb_Track_samplerate_low_get, _gpod._Itdb_Track_samplerate_low_set)
    __swig_setmethods__["year"] = _gpod._Itdb_Track_year_set
    __swig_getmethods__["year"] = _gpod._Itdb_Track_year_get
    if _newclass:year = _swig_property(_gpod._Itdb_Track_year_get, _gpod._Itdb_Track_year_set)
    __swig_setmethods__["volume"] = _gpod._Itdb_Track_volume_set
    __swig_getmethods__["volume"] = _gpod._Itdb_Track_volume_get
    if _newclass:volume = _swig_property(_gpod._Itdb_Track_volume_get, _gpod._Itdb_Track_volume_set)
    __swig_setmethods__["soundcheck"] = _gpod._Itdb_Track_soundcheck_set
    __swig_getmethods__["soundcheck"] = _gpod._Itdb_Track_soundcheck_get
    if _newclass:soundcheck = _swig_property(_gpod._Itdb_Track_soundcheck_get, _gpod._Itdb_Track_soundcheck_set)
    __swig_setmethods__["time_added"] = _gpod._Itdb_Track_time_added_set
    __swig_getmethods__["time_added"] = _gpod._Itdb_Track_time_added_get
    if _newclass:time_added = _swig_property(_gpod._Itdb_Track_time_added_get, _gpod._Itdb_Track_time_added_set)
    __swig_setmethods__["time_modified"] = _gpod._Itdb_Track_time_modified_set
    __swig_getmethods__["time_modified"] = _gpod._Itdb_Track_time_modified_get
    if _newclass:time_modified = _swig_property(_gpod._Itdb_Track_time_modified_get, _gpod._Itdb_Track_time_modified_set)
    __swig_setmethods__["time_played"] = _gpod._Itdb_Track_time_played_set
    __swig_getmethods__["time_played"] = _gpod._Itdb_Track_time_played_get
    if _newclass:time_played = _swig_property(_gpod._Itdb_Track_time_played_get, _gpod._Itdb_Track_time_played_set)
    __swig_setmethods__["bookmark_time"] = _gpod._Itdb_Track_bookmark_time_set
    __swig_getmethods__["bookmark_time"] = _gpod._Itdb_Track_bookmark_time_get
    if _newclass:bookmark_time = _swig_property(_gpod._Itdb_Track_bookmark_time_get, _gpod._Itdb_Track_bookmark_time_set)
    __swig_setmethods__["rating"] = _gpod._Itdb_Track_rating_set
    __swig_getmethods__["rating"] = _gpod._Itdb_Track_rating_get
    if _newclass:rating = _swig_property(_gpod._Itdb_Track_rating_get, _gpod._Itdb_Track_rating_set)
    __swig_setmethods__["playcount"] = _gpod._Itdb_Track_playcount_set
    __swig_getmethods__["playcount"] = _gpod._Itdb_Track_playcount_get
    if _newclass:playcount = _swig_property(_gpod._Itdb_Track_playcount_get, _gpod._Itdb_Track_playcount_set)
    __swig_setmethods__["playcount2"] = _gpod._Itdb_Track_playcount2_set
    __swig_getmethods__["playcount2"] = _gpod._Itdb_Track_playcount2_get
    if _newclass:playcount2 = _swig_property(_gpod._Itdb_Track_playcount2_get, _gpod._Itdb_Track_playcount2_set)
    __swig_setmethods__["recent_playcount"] = _gpod._Itdb_Track_recent_playcount_set
    __swig_getmethods__["recent_playcount"] = _gpod._Itdb_Track_recent_playcount_get
    if _newclass:recent_playcount = _swig_property(_gpod._Itdb_Track_recent_playcount_get, _gpod._Itdb_Track_recent_playcount_set)
    __swig_setmethods__["transferred"] = _gpod._Itdb_Track_transferred_set
    __swig_getmethods__["transferred"] = _gpod._Itdb_Track_transferred_get
    if _newclass:transferred = _swig_property(_gpod._Itdb_Track_transferred_get, _gpod._Itdb_Track_transferred_set)
    __swig_setmethods__["BPM"] = _gpod._Itdb_Track_BPM_set
    __swig_getmethods__["BPM"] = _gpod._Itdb_Track_BPM_get
    if _newclass:BPM = _swig_property(_gpod._Itdb_Track_BPM_get, _gpod._Itdb_Track_BPM_set)
    __swig_setmethods__["app_rating"] = _gpod._Itdb_Track_app_rating_set
    __swig_getmethods__["app_rating"] = _gpod._Itdb_Track_app_rating_get
    if _newclass:app_rating = _swig_property(_gpod._Itdb_Track_app_rating_get, _gpod._Itdb_Track_app_rating_set)
    __swig_setmethods__["type1"] = _gpod._Itdb_Track_type1_set
    __swig_getmethods__["type1"] = _gpod._Itdb_Track_type1_get
    if _newclass:type1 = _swig_property(_gpod._Itdb_Track_type1_get, _gpod._Itdb_Track_type1_set)
    __swig_setmethods__["type2"] = _gpod._Itdb_Track_type2_set
    __swig_getmethods__["type2"] = _gpod._Itdb_Track_type2_get
    if _newclass:type2 = _swig_property(_gpod._Itdb_Track_type2_get, _gpod._Itdb_Track_type2_set)
    __swig_setmethods__["compilation"] = _gpod._Itdb_Track_compilation_set
    __swig_getmethods__["compilation"] = _gpod._Itdb_Track_compilation_get
    if _newclass:compilation = _swig_property(_gpod._Itdb_Track_compilation_get, _gpod._Itdb_Track_compilation_set)
    __swig_setmethods__["starttime"] = _gpod._Itdb_Track_starttime_set
    __swig_getmethods__["starttime"] = _gpod._Itdb_Track_starttime_get
    if _newclass:starttime = _swig_property(_gpod._Itdb_Track_starttime_get, _gpod._Itdb_Track_starttime_set)
    __swig_setmethods__["stoptime"] = _gpod._Itdb_Track_stoptime_set
    __swig_getmethods__["stoptime"] = _gpod._Itdb_Track_stoptime_get
    if _newclass:stoptime = _swig_property(_gpod._Itdb_Track_stoptime_get, _gpod._Itdb_Track_stoptime_set)
    __swig_setmethods__["checked"] = _gpod._Itdb_Track_checked_set
    __swig_getmethods__["checked"] = _gpod._Itdb_Track_checked_get
    if _newclass:checked = _swig_property(_gpod._Itdb_Track_checked_get, _gpod._Itdb_Track_checked_set)
    __swig_setmethods__["dbid"] = _gpod._Itdb_Track_dbid_set
    __swig_getmethods__["dbid"] = _gpod._Itdb_Track_dbid_get
    if _newclass:dbid = _swig_property(_gpod._Itdb_Track_dbid_get, _gpod._Itdb_Track_dbid_set)
    __swig_setmethods__["drm_userid"] = _gpod._Itdb_Track_drm_userid_set
    __swig_getmethods__["drm_userid"] = _gpod._Itdb_Track_drm_userid_get
    if _newclass:drm_userid = _swig_property(_gpod._Itdb_Track_drm_userid_get, _gpod._Itdb_Track_drm_userid_set)
    __swig_setmethods__["visible"] = _gpod._Itdb_Track_visible_set
    __swig_getmethods__["visible"] = _gpod._Itdb_Track_visible_get
    if _newclass:visible = _swig_property(_gpod._Itdb_Track_visible_get, _gpod._Itdb_Track_visible_set)
    __swig_setmethods__["filetype_marker"] = _gpod._Itdb_Track_filetype_marker_set
    __swig_getmethods__["filetype_marker"] = _gpod._Itdb_Track_filetype_marker_get
    if _newclass:filetype_marker = _swig_property(_gpod._Itdb_Track_filetype_marker_get, _gpod._Itdb_Track_filetype_marker_set)
    __swig_setmethods__["artwork_count"] = _gpod._Itdb_Track_artwork_count_set
    __swig_getmethods__["artwork_count"] = _gpod._Itdb_Track_artwork_count_get
    if _newclass:artwork_count = _swig_property(_gpod._Itdb_Track_artwork_count_get, _gpod._Itdb_Track_artwork_count_set)
    __swig_setmethods__["artwork_size"] = _gpod._Itdb_Track_artwork_size_set
    __swig_getmethods__["artwork_size"] = _gpod._Itdb_Track_artwork_size_get
    if _newclass:artwork_size = _swig_property(_gpod._Itdb_Track_artwork_size_get, _gpod._Itdb_Track_artwork_size_set)
    __swig_setmethods__["samplerate2"] = _gpod._Itdb_Track_samplerate2_set
    __swig_getmethods__["samplerate2"] = _gpod._Itdb_Track_samplerate2_get
    if _newclass:samplerate2 = _swig_property(_gpod._Itdb_Track_samplerate2_get, _gpod._Itdb_Track_samplerate2_set)
    __swig_setmethods__["unk126"] = _gpod._Itdb_Track_unk126_set
    __swig_getmethods__["unk126"] = _gpod._Itdb_Track_unk126_get
    if _newclass:unk126 = _swig_property(_gpod._Itdb_Track_unk126_get, _gpod._Itdb_Track_unk126_set)
    __swig_setmethods__["unk132"] = _gpod._Itdb_Track_unk132_set
    __swig_getmethods__["unk132"] = _gpod._Itdb_Track_unk132_get
    if _newclass:unk132 = _swig_property(_gpod._Itdb_Track_unk132_get, _gpod._Itdb_Track_unk132_set)
    __swig_setmethods__["time_released"] = _gpod._Itdb_Track_time_released_set
    __swig_getmethods__["time_released"] = _gpod._Itdb_Track_time_released_get
    if _newclass:time_released = _swig_property(_gpod._Itdb_Track_time_released_get, _gpod._Itdb_Track_time_released_set)
    __swig_setmethods__["unk144"] = _gpod._Itdb_Track_unk144_set
    __swig_getmethods__["unk144"] = _gpod._Itdb_Track_unk144_get
    if _newclass:unk144 = _swig_property(_gpod._Itdb_Track_unk144_get, _gpod._Itdb_Track_unk144_set)
    __swig_setmethods__["explicit_flag"] = _gpod._Itdb_Track_explicit_flag_set
    __swig_getmethods__["explicit_flag"] = _gpod._Itdb_Track_explicit_flag_get
    if _newclass:explicit_flag = _swig_property(_gpod._Itdb_Track_explicit_flag_get, _gpod._Itdb_Track_explicit_flag_set)
    __swig_setmethods__["unk148"] = _gpod._Itdb_Track_unk148_set
    __swig_getmethods__["unk148"] = _gpod._Itdb_Track_unk148_get
    if _newclass:unk148 = _swig_property(_gpod._Itdb_Track_unk148_get, _gpod._Itdb_Track_unk148_set)
    __swig_setmethods__["unk152"] = _gpod._Itdb_Track_unk152_set
    __swig_getmethods__["unk152"] = _gpod._Itdb_Track_unk152_get
    if _newclass:unk152 = _swig_property(_gpod._Itdb_Track_unk152_get, _gpod._Itdb_Track_unk152_set)
    __swig_setmethods__["skipcount"] = _gpod._Itdb_Track_skipcount_set
    __swig_getmethods__["skipcount"] = _gpod._Itdb_Track_skipcount_get
    if _newclass:skipcount = _swig_property(_gpod._Itdb_Track_skipcount_get, _gpod._Itdb_Track_skipcount_set)
    __swig_setmethods__["recent_skipcount"] = _gpod._Itdb_Track_recent_skipcount_set
    __swig_getmethods__["recent_skipcount"] = _gpod._Itdb_Track_recent_skipcount_get
    if _newclass:recent_skipcount = _swig_property(_gpod._Itdb_Track_recent_skipcount_get, _gpod._Itdb_Track_recent_skipcount_set)
    __swig_setmethods__["last_skipped"] = _gpod._Itdb_Track_last_skipped_set
    __swig_getmethods__["last_skipped"] = _gpod._Itdb_Track_last_skipped_get
    if _newclass:last_skipped = _swig_property(_gpod._Itdb_Track_last_skipped_get, _gpod._Itdb_Track_last_skipped_set)
    __swig_setmethods__["has_artwork"] = _gpod._Itdb_Track_has_artwork_set
    __swig_getmethods__["has_artwork"] = _gpod._Itdb_Track_has_artwork_get
    if _newclass:has_artwork = _swig_property(_gpod._Itdb_Track_has_artwork_get, _gpod._Itdb_Track_has_artwork_set)
    __swig_setmethods__["skip_when_shuffling"] = _gpod._Itdb_Track_skip_when_shuffling_set
    __swig_getmethods__["skip_when_shuffling"] = _gpod._Itdb_Track_skip_when_shuffling_get
    if _newclass:skip_when_shuffling = _swig_property(_gpod._Itdb_Track_skip_when_shuffling_get, _gpod._Itdb_Track_skip_when_shuffling_set)
    __swig_setmethods__["remember_playback_position"] = _gpod._Itdb_Track_remember_playback_position_set
    __swig_getmethods__["remember_playback_position"] = _gpod._Itdb_Track_remember_playback_position_get
    if _newclass:remember_playback_position = _swig_property(_gpod._Itdb_Track_remember_playback_position_get, _gpod._Itdb_Track_remember_playback_position_set)
    __swig_setmethods__["flag4"] = _gpod._Itdb_Track_flag4_set
    __swig_getmethods__["flag4"] = _gpod._Itdb_Track_flag4_get
    if _newclass:flag4 = _swig_property(_gpod._Itdb_Track_flag4_get, _gpod._Itdb_Track_flag4_set)
    __swig_setmethods__["dbid2"] = _gpod._Itdb_Track_dbid2_set
    __swig_getmethods__["dbid2"] = _gpod._Itdb_Track_dbid2_get
    if _newclass:dbid2 = _swig_property(_gpod._Itdb_Track_dbid2_get, _gpod._Itdb_Track_dbid2_set)
    __swig_setmethods__["lyrics_flag"] = _gpod._Itdb_Track_lyrics_flag_set
    __swig_getmethods__["lyrics_flag"] = _gpod._Itdb_Track_lyrics_flag_get
    if _newclass:lyrics_flag = _swig_property(_gpod._Itdb_Track_lyrics_flag_get, _gpod._Itdb_Track_lyrics_flag_set)
    __swig_setmethods__["movie_flag"] = _gpod._Itdb_Track_movie_flag_set
    __swig_getmethods__["movie_flag"] = _gpod._Itdb_Track_movie_flag_get
    if _newclass:movie_flag = _swig_property(_gpod._Itdb_Track_movie_flag_get, _gpod._Itdb_Track_movie_flag_set)
    __swig_setmethods__["mark_unplayed"] = _gpod._Itdb_Track_mark_unplayed_set
    __swig_getmethods__["mark_unplayed"] = _gpod._Itdb_Track_mark_unplayed_get
    if _newclass:mark_unplayed = _swig_property(_gpod._Itdb_Track_mark_unplayed_get, _gpod._Itdb_Track_mark_unplayed_set)
    __swig_setmethods__["unk179"] = _gpod._Itdb_Track_unk179_set
    __swig_getmethods__["unk179"] = _gpod._Itdb_Track_unk179_get
    if _newclass:unk179 = _swig_property(_gpod._Itdb_Track_unk179_get, _gpod._Itdb_Track_unk179_set)
    __swig_setmethods__["unk180"] = _gpod._Itdb_Track_unk180_set
    __swig_getmethods__["unk180"] = _gpod._Itdb_Track_unk180_get
    if _newclass:unk180 = _swig_property(_gpod._Itdb_Track_unk180_get, _gpod._Itdb_Track_unk180_set)
    __swig_setmethods__["pregap"] = _gpod._Itdb_Track_pregap_set
    __swig_getmethods__["pregap"] = _gpod._Itdb_Track_pregap_get
    if _newclass:pregap = _swig_property(_gpod._Itdb_Track_pregap_get, _gpod._Itdb_Track_pregap_set)
    __swig_setmethods__["samplecount"] = _gpod._Itdb_Track_samplecount_set
    __swig_getmethods__["samplecount"] = _gpod._Itdb_Track_samplecount_get
    if _newclass:samplecount = _swig_property(_gpod._Itdb_Track_samplecount_get, _gpod._Itdb_Track_samplecount_set)
    __swig_setmethods__["unk196"] = _gpod._Itdb_Track_unk196_set
    __swig_getmethods__["unk196"] = _gpod._Itdb_Track_unk196_get
    if _newclass:unk196 = _swig_property(_gpod._Itdb_Track_unk196_get, _gpod._Itdb_Track_unk196_set)
    __swig_setmethods__["postgap"] = _gpod._Itdb_Track_postgap_set
    __swig_getmethods__["postgap"] = _gpod._Itdb_Track_postgap_get
    if _newclass:postgap = _swig_property(_gpod._Itdb_Track_postgap_get, _gpod._Itdb_Track_postgap_set)
    __swig_setmethods__["unk204"] = _gpod._Itdb_Track_unk204_set
    __swig_getmethods__["unk204"] = _gpod._Itdb_Track_unk204_get
    if _newclass:unk204 = _swig_property(_gpod._Itdb_Track_unk204_get, _gpod._Itdb_Track_unk204_set)
    __swig_setmethods__["mediatype"] = _gpod._Itdb_Track_mediatype_set
    __swig_getmethods__["mediatype"] = _gpod._Itdb_Track_mediatype_get
    if _newclass:mediatype = _swig_property(_gpod._Itdb_Track_mediatype_get, _gpod._Itdb_Track_mediatype_set)
    __swig_setmethods__["season_nr"] = _gpod._Itdb_Track_season_nr_set
    __swig_getmethods__["season_nr"] = _gpod._Itdb_Track_season_nr_get
    if _newclass:season_nr = _swig_property(_gpod._Itdb_Track_season_nr_get, _gpod._Itdb_Track_season_nr_set)
    __swig_setmethods__["episode_nr"] = _gpod._Itdb_Track_episode_nr_set
    __swig_getmethods__["episode_nr"] = _gpod._Itdb_Track_episode_nr_get
    if _newclass:episode_nr = _swig_property(_gpod._Itdb_Track_episode_nr_get, _gpod._Itdb_Track_episode_nr_set)
    __swig_setmethods__["unk220"] = _gpod._Itdb_Track_unk220_set
    __swig_getmethods__["unk220"] = _gpod._Itdb_Track_unk220_get
    if _newclass:unk220 = _swig_property(_gpod._Itdb_Track_unk220_get, _gpod._Itdb_Track_unk220_set)
    __swig_setmethods__["unk224"] = _gpod._Itdb_Track_unk224_set
    __swig_getmethods__["unk224"] = _gpod._Itdb_Track_unk224_get
    if _newclass:unk224 = _swig_property(_gpod._Itdb_Track_unk224_get, _gpod._Itdb_Track_unk224_set)
    __swig_setmethods__["unk228"] = _gpod._Itdb_Track_unk228_set
    __swig_getmethods__["unk228"] = _gpod._Itdb_Track_unk228_get
    if _newclass:unk228 = _swig_property(_gpod._Itdb_Track_unk228_get, _gpod._Itdb_Track_unk228_set)
    __swig_setmethods__["unk232"] = _gpod._Itdb_Track_unk232_set
    __swig_getmethods__["unk232"] = _gpod._Itdb_Track_unk232_get
    if _newclass:unk232 = _swig_property(_gpod._Itdb_Track_unk232_get, _gpod._Itdb_Track_unk232_set)
    __swig_setmethods__["unk236"] = _gpod._Itdb_Track_unk236_set
    __swig_getmethods__["unk236"] = _gpod._Itdb_Track_unk236_get
    if _newclass:unk236 = _swig_property(_gpod._Itdb_Track_unk236_get, _gpod._Itdb_Track_unk236_set)
    __swig_setmethods__["unk240"] = _gpod._Itdb_Track_unk240_set
    __swig_getmethods__["unk240"] = _gpod._Itdb_Track_unk240_get
    if _newclass:unk240 = _swig_property(_gpod._Itdb_Track_unk240_get, _gpod._Itdb_Track_unk240_set)
    __swig_setmethods__["unk244"] = _gpod._Itdb_Track_unk244_set
    __swig_getmethods__["unk244"] = _gpod._Itdb_Track_unk244_get
    if _newclass:unk244 = _swig_property(_gpod._Itdb_Track_unk244_get, _gpod._Itdb_Track_unk244_set)
    __swig_setmethods__["gapless_data"] = _gpod._Itdb_Track_gapless_data_set
    __swig_getmethods__["gapless_data"] = _gpod._Itdb_Track_gapless_data_get
    if _newclass:gapless_data = _swig_property(_gpod._Itdb_Track_gapless_data_get, _gpod._Itdb_Track_gapless_data_set)
    __swig_setmethods__["unk252"] = _gpod._Itdb_Track_unk252_set
    __swig_getmethods__["unk252"] = _gpod._Itdb_Track_unk252_get
    if _newclass:unk252 = _swig_property(_gpod._Itdb_Track_unk252_get, _gpod._Itdb_Track_unk252_set)
    __swig_setmethods__["gapless_track_flag"] = _gpod._Itdb_Track_gapless_track_flag_set
    __swig_getmethods__["gapless_track_flag"] = _gpod._Itdb_Track_gapless_track_flag_get
    if _newclass:gapless_track_flag = _swig_property(_gpod._Itdb_Track_gapless_track_flag_get, _gpod._Itdb_Track_gapless_track_flag_set)
    __swig_setmethods__["gapless_album_flag"] = _gpod._Itdb_Track_gapless_album_flag_set
    __swig_getmethods__["gapless_album_flag"] = _gpod._Itdb_Track_gapless_album_flag_get
    if _newclass:gapless_album_flag = _swig_property(_gpod._Itdb_Track_gapless_album_flag_get, _gpod._Itdb_Track_gapless_album_flag_set)
    __swig_setmethods__["album_id"] = _gpod._Itdb_Track_album_id_set
    __swig_getmethods__["album_id"] = _gpod._Itdb_Track_album_id_get
    if _newclass:album_id = _swig_property(_gpod._Itdb_Track_album_id_get, _gpod._Itdb_Track_album_id_set)
    __swig_setmethods__["artwork"] = _gpod._Itdb_Track_artwork_set
    __swig_getmethods__["artwork"] = _gpod._Itdb_Track_artwork_get
    if _newclass:artwork = _swig_property(_gpod._Itdb_Track_artwork_get, _gpod._Itdb_Track_artwork_set)
    __swig_setmethods__["mhii_link"] = _gpod._Itdb_Track_mhii_link_set
    __swig_getmethods__["mhii_link"] = _gpod._Itdb_Track_mhii_link_get
    if _newclass:mhii_link = _swig_property(_gpod._Itdb_Track_mhii_link_get, _gpod._Itdb_Track_mhii_link_set)
    __swig_setmethods__["reserved_int1"] = _gpod._Itdb_Track_reserved_int1_set
    __swig_getmethods__["reserved_int1"] = _gpod._Itdb_Track_reserved_int1_get
    if _newclass:reserved_int1 = _swig_property(_gpod._Itdb_Track_reserved_int1_get, _gpod._Itdb_Track_reserved_int1_set)
    __swig_setmethods__["reserved_int2"] = _gpod._Itdb_Track_reserved_int2_set
    __swig_getmethods__["reserved_int2"] = _gpod._Itdb_Track_reserved_int2_get
    if _newclass:reserved_int2 = _swig_property(_gpod._Itdb_Track_reserved_int2_get, _gpod._Itdb_Track_reserved_int2_set)
    __swig_setmethods__["reserved_int3"] = _gpod._Itdb_Track_reserved_int3_set
    __swig_getmethods__["reserved_int3"] = _gpod._Itdb_Track_reserved_int3_get
    if _newclass:reserved_int3 = _swig_property(_gpod._Itdb_Track_reserved_int3_get, _gpod._Itdb_Track_reserved_int3_set)
    __swig_setmethods__["reserved_int4"] = _gpod._Itdb_Track_reserved_int4_set
    __swig_getmethods__["reserved_int4"] = _gpod._Itdb_Track_reserved_int4_get
    if _newclass:reserved_int4 = _swig_property(_gpod._Itdb_Track_reserved_int4_get, _gpod._Itdb_Track_reserved_int4_set)
    __swig_setmethods__["reserved_int5"] = _gpod._Itdb_Track_reserved_int5_set
    __swig_getmethods__["reserved_int5"] = _gpod._Itdb_Track_reserved_int5_get
    if _newclass:reserved_int5 = _swig_property(_gpod._Itdb_Track_reserved_int5_get, _gpod._Itdb_Track_reserved_int5_set)
    __swig_setmethods__["reserved_int6"] = _gpod._Itdb_Track_reserved_int6_set
    __swig_getmethods__["reserved_int6"] = _gpod._Itdb_Track_reserved_int6_get
    if _newclass:reserved_int6 = _swig_property(_gpod._Itdb_Track_reserved_int6_get, _gpod._Itdb_Track_reserved_int6_set)
    __swig_setmethods__["reserved1"] = _gpod._Itdb_Track_reserved1_set
    __swig_getmethods__["reserved1"] = _gpod._Itdb_Track_reserved1_get
    if _newclass:reserved1 = _swig_property(_gpod._Itdb_Track_reserved1_get, _gpod._Itdb_Track_reserved1_set)
    __swig_setmethods__["reserved2"] = _gpod._Itdb_Track_reserved2_set
    __swig_getmethods__["reserved2"] = _gpod._Itdb_Track_reserved2_get
    if _newclass:reserved2 = _swig_property(_gpod._Itdb_Track_reserved2_get, _gpod._Itdb_Track_reserved2_set)
    __swig_setmethods__["reserved3"] = _gpod._Itdb_Track_reserved3_set
    __swig_getmethods__["reserved3"] = _gpod._Itdb_Track_reserved3_get
    if _newclass:reserved3 = _swig_property(_gpod._Itdb_Track_reserved3_get, _gpod._Itdb_Track_reserved3_set)
    __swig_setmethods__["reserved4"] = _gpod._Itdb_Track_reserved4_set
    __swig_getmethods__["reserved4"] = _gpod._Itdb_Track_reserved4_get
    if _newclass:reserved4 = _swig_property(_gpod._Itdb_Track_reserved4_get, _gpod._Itdb_Track_reserved4_set)
    __swig_setmethods__["reserved5"] = _gpod._Itdb_Track_reserved5_set
    __swig_getmethods__["reserved5"] = _gpod._Itdb_Track_reserved5_get
    if _newclass:reserved5 = _swig_property(_gpod._Itdb_Track_reserved5_get, _gpod._Itdb_Track_reserved5_set)
    __swig_setmethods__["reserved6"] = _gpod._Itdb_Track_reserved6_set
    __swig_getmethods__["reserved6"] = _gpod._Itdb_Track_reserved6_get
    if _newclass:reserved6 = _swig_property(_gpod._Itdb_Track_reserved6_get, _gpod._Itdb_Track_reserved6_set)
    __swig_setmethods__["usertype"] = _gpod._Itdb_Track_usertype_set
    __swig_getmethods__["usertype"] = _gpod._Itdb_Track_usertype_get
    if _newclass:usertype = _swig_property(_gpod._Itdb_Track_usertype_get, _gpod._Itdb_Track_usertype_set)
    __swig_setmethods__["userdata"] = _gpod._Itdb_Track_userdata_set
    __swig_getmethods__["userdata"] = _gpod._Itdb_Track_userdata_get
    if _newclass:userdata = _swig_property(_gpod._Itdb_Track_userdata_get, _gpod._Itdb_Track_userdata_set)
    __swig_setmethods__["userdata_duplicate"] = _gpod._Itdb_Track_userdata_duplicate_set
    __swig_getmethods__["userdata_duplicate"] = _gpod._Itdb_Track_userdata_duplicate_get
    if _newclass:userdata_duplicate = _swig_property(_gpod._Itdb_Track_userdata_duplicate_get, _gpod._Itdb_Track_userdata_duplicate_set)
    __swig_setmethods__["userdata_destroy"] = _gpod._Itdb_Track_userdata_destroy_set
    __swig_getmethods__["userdata_destroy"] = _gpod._Itdb_Track_userdata_destroy_get
    if _newclass:userdata_destroy = _swig_property(_gpod._Itdb_Track_userdata_destroy_get, _gpod._Itdb_Track_userdata_destroy_set)
    def __init__(self, *args): 
        """__init__(self) -> _Itdb_Track"""
        this = _gpod.new__Itdb_Track(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gpod.delete__Itdb_Track
    __del__ = lambda self : None;
_Itdb_Track_swigregister = _gpod._Itdb_Track_swigregister
_Itdb_Track_swigregister(_Itdb_Track)

ITDB_FILE_ERROR_SEEK = _gpod.ITDB_FILE_ERROR_SEEK
ITDB_FILE_ERROR_CORRUPT = _gpod.ITDB_FILE_ERROR_CORRUPT
ITDB_FILE_ERROR_NOTFOUND = _gpod.ITDB_FILE_ERROR_NOTFOUND
ITDB_FILE_ERROR_RENAME = _gpod.ITDB_FILE_ERROR_RENAME
ITDB_FILE_ERROR_ITDB_CORRUPT = _gpod.ITDB_FILE_ERROR_ITDB_CORRUPT

def itdb_file_error_quark(*args):
  """itdb_file_error_quark() -> GQuark"""
  return _gpod.itdb_file_error_quark(*args)

def itdb_parse(*args):
  """
    itdb_parse(gchar mp, GError error) -> Itdb_iTunesDB

    Parse the Itdb_iTunesDB of the iPod located at mp

    Parameters
    mp:     mount point of the iPod (eg "/mnt/ipod") in local encoding
    error:  return location for a GError or NULL
    Returns: a newly allocated Itdb_iTunesDB struct holding the tracks and
    the playlists present on the iPod at mp, NULL if mp isn't an iPod mount
    point. If non-NULL, the Itdb_iTunesDB is to be freed with itdb_free() when
    it's no longer needed

    """
  return _gpod.itdb_parse(*args)

def itdb_parse_file(*args):
  """
    itdb_parse_file(gchar filename, GError error) -> Itdb_iTunesDB

    Same as itunesdb_parse(), but filename is specified directly.

    Parameters
    filename:   path to a file in iTunesDB format
    error:      return location for a GError or NULL
    Returns: a newly allocated Itdb_iTunesDB struct holding the tracks and
    the playlists present in filename, NULL if filename isn't a parsable 
    iTunesDB file. If non-NULL, the Itdb_iTunesDB is to be freed with 
    itdb_free() when it's no longer needed

    """
  return _gpod.itdb_parse_file(*args)

def itdb_write(*args):
  """
    itdb_write(Itdb_iTunesDB itdb, GError error) -> gboolean

    Write out an iTunesDB. It reassigns unique IDs to all tracks. 
    An existing "Play Counts" file is renamed to "Play Counts.bak" if
    the export was successful.
    An existing "OTGPlaylistInfo" file is removed if the export was
    successful.

    Parameters
    itdb:   the Itdb_iTunesDB to write to disk
    error:  return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.

    """
  return _gpod.itdb_write(*args)

def itdb_write_file(*args):
  """
    itdb_write_file(Itdb_iTunesDB itdb, gchar filename, GError error) -> gboolean

    Write the content of itdb to filename. If filename is NULL, it attempts
    to write to itdb->filename.

    Parameters
    itdb:       the Itdb_iTunesDB to save
    filename:   filename to save itdb to
    error:      return location for a GError or NULL
    Returns: TRUE if all went well, FALSE otherwise

    """
  return _gpod.itdb_write_file(*args)

def itdb_shuffle_write(*args):
  """
    itdb_shuffle_write(Itdb_iTunesDB itdb, GError error) -> gboolean

    Write out an iTunesSD for the Shuffle.


    Parameters
    itdb:   the Itdb_iTunesDB to write to disk
    error:  return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.

    """
  return _gpod.itdb_shuffle_write(*args)

def itdb_shuffle_write_file(*args):
  """
    itdb_shuffle_write_file(Itdb_iTunesDB itdb, gchar filename, GError error) -> gboolean

    Do the actual writing to the iTunesSD

    Parameters
    itdb:       the Itdb_iTunesDB to write to disk
    filename:   file to write to, cannot be NULL
    error:      return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.

    """
  return _gpod.itdb_shuffle_write_file(*args)

def itdb_new(*args):
  """
    itdb_new() -> Itdb_iTunesDB

    Creates a new Itdb_iTunesDB with the unknowns filled in to reasonable
    values.

    Parameters
    Returns: a newly created Itdb_iTunesDB to be freed with itdb_free()
    when it's no longer needed

    """
  return _gpod.itdb_new(*args)

def itdb_free(*args):
  """
    itdb_free(Itdb_iTunesDB itdb)

    Free the memory taken by itdb.

    Parameters
    itdb: an Itdb_iTunesDB

    """
  return _gpod.itdb_free(*args)

def itdb_duplicate(*args):
  """
    itdb_duplicate(Itdb_iTunesDB itdb) -> Itdb_iTunesDB

    Duplicate itdb 
    FIXME: not implemented yet

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: always return NULL since it's unimplemented

    """
  return _gpod.itdb_duplicate(*args)

def itdb_tracks_number(*args):
  """
    itdb_tracks_number(Itdb_iTunesDB itdb) -> guint32

    Counts the number of tracks stored in itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the number of tracks in itdb

    """
  return _gpod.itdb_tracks_number(*args)

def itdb_tracks_number_nontransferred(*args):
  """
    itdb_tracks_number_nontransferred(Itdb_iTunesDB itdb) -> guint32

    Counts the number of non-transferred tracks in itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the number of tracks in itdb that haven't been transferred
    to the iPod yet (ie the number of Itdb_Track in which the transferred field
    is false)

    """
  return _gpod.itdb_tracks_number_nontransferred(*args)

def itdb_playlists_number(*args):
  """
    itdb_playlists_number(Itdb_iTunesDB itdb) -> guint32

    Counts the number of playlists stored in itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the number of playlists in itdb (including the master 
    playlist)

    """
  return _gpod.itdb_playlists_number(*args)

def itdb_musicdirs_number(*args):
  """
    itdb_musicdirs_number(Itdb_iTunesDB itdb) -> gint

    Determine the number of F.. directories in iPod_Control/Music.


    Parameters
    itdb: an Itdb_iTunesDB
    Returns: max number of directories in iPod_Control/Music


    """
  return _gpod.itdb_musicdirs_number(*args)

def itdb_resolve_path(*args):
  """
    itdb_resolve_path(gchar root, gchar components) -> gchar

    Resolve the path to a track on the iPod


    Parameters
    root: in local encoding
    components: in utf8
    Returns: path to track on the iPod or NULL.

    """
  return _gpod.itdb_resolve_path(*args)

def itdb_rename_files(*args):
  """
    itdb_rename_files(gchar mp, GError error) -> gboolean

    Renames/removes some files on the iPod (Playcounts, OTG
    semaphore). May have to be called if you write the iTunesDB not
    directly to the iPod but to some other location and then manually
    copy the file from there to the iPod.

    Parameters
    mp:     mount point of the iPod
    error:  return location for a GError or NULL
    Returns: FALSE on error and sets error accordingly

    """
  return _gpod.itdb_rename_files(*args)

def itdb_cp_get_dest_filename(*args):
  """
    itdb_cp_get_dest_filename(Itdb_Track track, gchar mountpoint, gchar filename, 
        GError error) -> gchar

    Creates a valid filename on the iPod where filename can be copied.


    Parameters
    track:      track to transfer or NULL
    mountpoint: mountpoint of your iPod or NULL
    filename:   the source file
    error:      return location for a GError or NULL
    Returns: a valid filename on the iPod where filename can be
    copied or NULL in case of an error. In that case error is set
    accordingly. You must free the filename when it is no longer
    needed.


    """
  return _gpod.itdb_cp_get_dest_filename(*args)

def itdb_cp(*args):
  """
    itdb_cp(gchar from_file, gchar to_file, GError error) -> gboolean

    Copy file from_file to to_file.

    Parameters
    from_file:  source file
    to_file:    destination file
    error:      return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.

    """
  return _gpod.itdb_cp(*args)

def itdb_cp_finalize(*args):
  """
    itdb_cp_finalize(Itdb_Track track, gchar mountpoint, gchar dest_filename, 
        GError error) -> Itdb_Track

    Updates information in track necessary for the iPod.


    Parameters
    track:          track to update or NULL
    mountpoint:     mountpoint of your iPod or NULL
    dest_filename:  the name of the file on the iPod copied to
    error:          return location for a GError or NULL
    Returns: on success a pointer to the Itdb_Track item passed
    or a new Itdb_Track item if track was NULL. In the latter case
    you must free the memory using itdb_track_free() when the item is
    no longer used. If an error occurs NULL is returned and error is
    set accordingly. Errors occur when dest_filename cannot be
    accessed or the mountpoint is not set.


    """
  return _gpod.itdb_cp_finalize(*args)

def itdb_cp_track_to_ipod(*args):
  """
    itdb_cp_track_to_ipod(Itdb_Track track, gchar filename, GError error) -> gboolean

    Copy one track to the iPod. The PC filename is filename
    and is taken literally.


    Parameters
    track:      the Itdb_Track to copy (containing filename metadata)
    filename:   the source file
    error:      return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.

    """
  return _gpod.itdb_cp_track_to_ipod(*args)

def itdb_filename_fs2ipod(*args):
  """
    itdb_filename_fs2ipod(gchar filename)

    Convert string from casual PC file name to iPod iTunesDB format
    using ':' instead of G_DIR_SEPARATOR_S (i.e. slashes on Unix-like
    systems). ipod_file is modified in place.

    Parameters
    filename: a 'PC-style' filename (eg /iPod_Control/Music/f00/test.mp3)

    """
  return _gpod.itdb_filename_fs2ipod(*args)

def itdb_filename_ipod2fs(*args):
  """
    itdb_filename_ipod2fs(gchar ipod_file)

    Convert string from from iPod iTunesDB format to casual PC file
    name using G_DIR_SEPARATOR (ie slashes on Unix-like systems)
    instead of ':'.  ipod_file is modified in place.

    Parameters
    ipod_file: a 'PC-style' filename (eg /iPod_Control/Music/f00/test.mp3)

    """
  return _gpod.itdb_filename_ipod2fs(*args)

def itdb_filename_on_ipod(*args):
  """
    itdb_filename_on_ipod(Itdb_Track track) -> gchar

    Get the full iPod filename as stored in track.


    Parameters
    track: an Itdb_Track
    Returns: full filename to track on the iPod or NULL if no
    filename is set in track. Must be freed with g_free() after use.

    """
  return _gpod.itdb_filename_on_ipod(*args)

def itdb_set_mountpoint(*args):
  """
    itdb_set_mountpoint(Itdb_iTunesDB itdb, gchar mp)

    Sets the mountpoint of itdb. Always use this function to set the
    mountpoint of an Itdb_iTunesDB as it will reset the number of
    available /iPod_Control/Music/F.. dirs. It doesn't attempt to parse
    an iPod database that may be present on the iPod at mp.


    Parameters
    itdb:   an Itdb_iTunesDB
    mp:     new mount point

    """
  return _gpod.itdb_set_mountpoint(*args)

def itdb_get_mountpoint(*args):
  """
    itdb_get_mountpoint(Itdb_iTunesDB itdb) -> gchar

    Retrieve a reference to the mountpoint of itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the itdb mountpoint, this string shouldn't be freed
    nor modified


    """
  return _gpod.itdb_get_mountpoint(*args)

def itdb_get_control_dir(*args):
  """
    itdb_get_control_dir(gchar mountpoint) -> gchar

    Get the i*_Control directory. Observed values are 'iPod_Control'
    for standard iPods and 'iTunes/iTunes_Control' for mobile
    applications.

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the control dir or NULL if non-existent. Must
    g_free() after use.


    """
  return _gpod.itdb_get_control_dir(*args)

def itdb_get_itunes_dir(*args):
  """
    itdb_get_itunes_dir(gchar mountpoint) -> gchar

    Retrieve the iTunes directory (containing the iTunesDB) by first
    calling itdb_get_control_dir() and then adding 'iTunes'

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the iTunes directory or NULL if non-existent.
    Must g_free() after use.


    """
  return _gpod.itdb_get_itunes_dir(*args)

def itdb_get_music_dir(*args):
  """
    itdb_get_music_dir(gchar mountpoint) -> gchar

    Retrieve the Music directory (containing the Fnn dirs) by first
    calling itdb_get_control_dir() and then adding 'Music'

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the Music directory or NULL if
    non-existent. Must g_free() after use.

    """
  return _gpod.itdb_get_music_dir(*args)

def itdb_get_artwork_dir(*args):
  """
    itdb_get_artwork_dir(gchar mountpoint) -> gchar

    Retrieve the Artwork directory (containing the ArtworDB) by
    first calling itdb_get_control_dir() and then adding 'Artwork'

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the Artwork directory or NULL if
    non-existent. Must g_free() after use.


    """
  return _gpod.itdb_get_artwork_dir(*args)

def itdb_get_photos_dir(*args):
  """
    itdb_get_photos_dir(gchar mountpoint) -> gchar

    Retrieve the Photo directory by
    first calling itdb_get_control_dir() and then adding 'Photos'

    Parameters
    mountpoint: mountpoint of iPod
    Returns: path to the Artwork directory or NULL if
    non-existent. Must g_free() after use.


    """
  return _gpod.itdb_get_photos_dir(*args)

def itdb_get_photos_thumb_dir(*args):
  """
    itdb_get_photos_thumb_dir(gchar mountpoint) -> gchar

    Retrieve the Photo Thumbnail directory by
    first calling itdb_get_control_dir() and then adding 'Photos/Thumbs'

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the Artwork directory or NULL if
    non-existent. Must g_free() after use.


    """
  return _gpod.itdb_get_photos_thumb_dir(*args)

def itdb_get_device_dir(*args):
  """
    itdb_get_device_dir(gchar mountpoint) -> gchar

    Retrieve the Device directory (containing the SysInfo file) by
    first calling itdb_get_control_dir() and then adding 'Device'

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the Device directory or NULL if
    non-existent. Must g_free() after use.


    """
  return _gpod.itdb_get_device_dir(*args)

def itdb_get_itunesdb_path(*args):
  """
    itdb_get_itunesdb_path(gchar mountpoint) -> gchar

    Retrieve a path to the iTunesDB

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the iTunesDB or NULL if non-existent. Must g_free()
    after use.


    """
  return _gpod.itdb_get_itunesdb_path(*args)

def itdb_get_itunessd_path(*args):
  """
    itdb_get_itunessd_path(gchar mountpoint) -> gchar

    Retrieve a path to the iTunesSD

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the iTunesSD or NULL if non-existent. Must g_free()
    after use.


    """
  return _gpod.itdb_get_itunessd_path(*args)

def itdb_get_artworkdb_path(*args):
  """
    itdb_get_artworkdb_path(gchar mountpoint) -> gchar

    Retrieve a path to the ArtworkDB

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the ArtworkDB or NULL if non-existent. Must g_free()
    after use.


    """
  return _gpod.itdb_get_artworkdb_path(*args)

def itdb_get_photodb_path(*args):
  """
    itdb_get_photodb_path(gchar mountpoint) -> gchar

    Retrieve a path to the Photo DB

    Parameters
    mountpoint: the iPod mountpoint
    Returns: path to the PhotoDB or NULL if non-existent. Must
    g_free() after use.


    """
  return _gpod.itdb_get_photodb_path(*args)

def itdb_get_path(*args):
  """
    itdb_get_path(gchar dir, gchar file) -> gchar

    Retrieve a path to the file in dir

    Parameters
    dir:    a directory
    file:   a file
    Returns: path to the file or NULL if non-existent. Must g_free()
    after use.


    """
  return _gpod.itdb_get_path(*args)

def itdb_device_new(*args):
  """
    itdb_device_new() -> Itdb_Device

    Creates a new Itdb_Device structure

    Parameters
    Returns: a newly allocated Itdb_Device which must be freed with
    itdb_device_free() when no longer needed


    """
  return _gpod.itdb_device_new(*args)

def itdb_device_free(*args):
  """
    itdb_device_free(Itdb_Device device)

    Frees memory used by device

    Parameters
    device: an Itdb_Device

    """
  return _gpod.itdb_device_free(*args)

def itdb_device_set_mountpoint(*args):
  """
    itdb_device_set_mountpoint(Itdb_Device device, gchar mp)

    Sets the mountpoint of device to mp and update the cached device 
    information (in particular, re-read the SysInfo file)


    Parameters
    device: an Itdb_Device
    mp:     the new mount point

    """
  return _gpod.itdb_device_set_mountpoint(*args)

def itdb_device_read_sysinfo(*args):
  """
    itdb_device_read_sysinfo(Itdb_Device device) -> gboolean

    Reads the SysInfo file and stores information in device->sysinfo for
    later use.


    Parameters
    device: an Itdb_Device
    Returns: TRUE if file could be read, FALSE otherwise 


    """
  return _gpod.itdb_device_read_sysinfo(*args)

def itdb_device_write_sysinfo(*args):
  """
    itdb_device_write_sysinfo(Itdb_Device device, GError error) -> gboolean

    Fills the SysInfo file with information in device->sysinfo. Note:
    no directories are created if not already existent.

    Parameters
    device: an Itdb_Device
    error:  return location for a GError or NULL
    Returns: TRUE if file could be read, FALSE otherwise 


    """
  return _gpod.itdb_device_write_sysinfo(*args)

def itdb_device_get_sysinfo(*args):
  """
    itdb_device_get_sysinfo(Itdb_Device device, gchar field) -> gchar

    Retrieve specified field from the SysInfo file.

    Parameters
    device: an Itdb_Device
    field:  field to retrive information from
    Returns: the information associated with field, or NULL if field
    couldn't be found. g_free() after use


    """
  return _gpod.itdb_device_get_sysinfo(*args)

def itdb_device_set_sysinfo(*args):
  """
    itdb_device_set_sysinfo(Itdb_Device device, gchar field, gchar value)

    Set specified field. It can later be written to the iPod using
    itdb_device_write_sysinfo()

    Parameters
    device: an Itdb_Device
    field:  field to set
    value:  value to set (or NULL to remove the field).

    """
  return _gpod.itdb_device_set_sysinfo(*args)

def itdb_device_get_ipod_info(*args):
  """
    itdb_device_get_ipod_info(Itdb_Device device) -> Itdb_IpodInfo

    Retrieve the Itdb_IpodInfo entry for this iPod

    Parameters
    device: an Itdb_Device
    Returns: the Itdb_IpodInfo entry for this iPod


    """
  return _gpod.itdb_device_get_ipod_info(*args)

def itdb_info_get_ipod_info_table(*args):
  """
    itdb_info_get_ipod_info_table() -> Itdb_IpodInfo

    Return a pointer to the start of valid iPod model descriptions,
    which is an array of Itdb_IpodInfo entries. This can be useful if you
    want to build a list of all iPod models known to the current libgpod.

    Parameters
    Returns: a pointer to the array of Itdb_IpodInfo entries.


    """
  return _gpod.itdb_info_get_ipod_info_table(*args)

def itdb_device_supports_artwork(*args):
  """
    itdb_device_supports_artwork(Itdb_Device device) -> gboolean

    Indicates whether device can display artwork or not. When dealing
    with a non-art capable iPod, no artwork data will be written to the
    iPod so you can spare calls to the artwork handling methods.

    Parameters
    device: an Itdb_Device
    Returns: true if device can display artwork.


    """
  return _gpod.itdb_device_supports_artwork(*args)

def itdb_device_supports_chapter_image(*args):
  """
    itdb_device_supports_chapter_image(Itdb_Device device) -> gboolean

    Indicates whether device can display chapter images or not.

    Parameters
    device: an Itdb_Device
    Returns: true if device can display chapter images.


    """
  return _gpod.itdb_device_supports_chapter_image(*args)

def itdb_device_supports_video(*args):
  """
    itdb_device_supports_video(Itdb_Device device) -> gboolean

    Indicates whether device can play videos or not.

    Parameters
    device: an Itdb_Device
    Returns: true if device can play videos.


    """
  return _gpod.itdb_device_supports_video(*args)

def itdb_device_supports_photo(*args):
  """
    itdb_device_supports_photo(Itdb_Device device) -> gboolean

    Indicates whether device can display photos or not.

    Parameters
    device: an Itdb_Device
    Returns: true if device can display photos.


    """
  return _gpod.itdb_device_supports_photo(*args)

def itdb_device_supports_podcast(*args):
  """
    itdb_device_supports_podcast(Itdb_Device device) -> gboolean

    Indicates whether device can play podcasts or not.

    Parameters
    device: an Itdb_Device
    Returns: true if device can play podcasts.


    """
  return _gpod.itdb_device_supports_podcast(*args)

def itdb_info_get_ipod_model_name_string(*args):
  """
    itdb_info_get_ipod_model_name_string(Itdb_IpodModel model) -> gchar

    Return the iPod's generic model name, like "Color", "Nano"...

    Parameters
    model: an Itdb_IpodModel
    Returns: a pointer to the model name. This is a static string
    and must not be g_free()d.


    """
  return _gpod.itdb_info_get_ipod_model_name_string(*args)

def itdb_info_get_ipod_generation_string(*args):
  """
    itdb_info_get_ipod_generation_string(Itdb_IpodGeneration generation) -> gchar

    Return the iPod's generic generation name, like "First Generation",
    "Mobile Phone"...

    Parameters
    generation: an Itdb_IpodGeneration
    Returns: a pointer to the generation name. This is a static
    string and must not be g_free()d.


    """
  return _gpod.itdb_info_get_ipod_generation_string(*args)

def itdb_track_new(*args):
  """
    itdb_track_new() -> Itdb_Track

    Creates an empty Itdb_Track

    Parameters
    Returns: the new Itdb_Track, free it with itdb_track_free() when no
    longer needed

    """
  return _gpod.itdb_track_new(*args)

def itdb_track_free(*args):
  """
    itdb_track_free(Itdb_Track track)

    Frees the memory used by track

    Parameters
    track: an Itdb_Track

    """
  return _gpod.itdb_track_free(*args)

def itdb_track_add(*args):
  """
    itdb_track_add(Itdb_iTunesDB itdb, Itdb_Track track, gint32 pos)

    Adds track to itdb->tracks at position pos (or at the end if pos
    is -1). The application is responsible to also add it to the master
    playlist. The itdb gets ownership of the track and will take care of
    freeing the memory it uses when it's no longer necessary.

    Parameters
    itdb:   an Itdb_iTunesDB
    track:  an Itdb_Track
    pos:    position of the track to add

    """
  return _gpod.itdb_track_add(*args)

def itdb_track_remove(*args):
  """
    itdb_track_remove(Itdb_Track track)

    Removes track from the Itdb_iTunesDB it's associated with, and frees the
    memory it uses. It doesn't remove the track from the playlists it may have
    been added to, in particular it won't be removed from the master playlist.

    Parameters
    track: an Itdb_Track

    """
  return _gpod.itdb_track_remove(*args)

def itdb_track_unlink(*args):
  """
    itdb_track_unlink(Itdb_Track track)

    Removes track from the Itdb_iTunesDB it's associated with, but do not free
    memory. It doesn't remove the track from the playlists it may have been
    added to, in particular it won't be removed from the master playlist.
    track->itdb is set to NULL.

    Parameters
    track: an Itdb_Track

    """
  return _gpod.itdb_track_unlink(*args)

def itdb_track_duplicate(*args):
  """
    itdb_track_duplicate(Itdb_Track tr) -> Itdb_Track

    Duplicates an existing track

    Parameters
    tr: an Itdb_Track
    Returns: a newly allocated Itdb_Track

    """
  return _gpod.itdb_track_duplicate(*args)

def itdb_track_by_id(*args):
  """
    itdb_track_by_id(Itdb_iTunesDB itdb, guint32 id) -> Itdb_Track

    Looks up a track using its ID in itdb.


    Parameters
    itdb: an Itdb_iTunesDB
    id:   ID of the track to look for
    Returns: Itdb_Track with the ID id or NULL if the ID cannot be
    found.

    """
  return _gpod.itdb_track_by_id(*args)

def itdb_track_id_tree_create(*args):
  """
    itdb_track_id_tree_create(Itdb_iTunesDB itdb) -> GTree

    Creates a balanced-binary tree for quick ID lookup that is used in
    itdb_track_by_id_tree()

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: a GTree indexed by track IDs to be freed with
    itdb_track_id_tree_destroy() when no longer used

    """
  return _gpod.itdb_track_id_tree_create(*args)

def itdb_track_id_tree_destroy(*args):
  """
    itdb_track_id_tree_destroy(GTree idtree)

    Frees the memory used by idtree

    Parameters
    idtree: a GTree

    """
  return _gpod.itdb_track_id_tree_destroy(*args)

def itdb_track_id_tree_by_id(*args):
  """
    itdb_track_id_tree_by_id(GTree idtree, guint32 id) -> Itdb_Track

    Lookup an Itdb_Track by id using idtree for faster lookup
    (compared to itdb_track_by_id())

    Parameters
    idtree: a GTree created using itdb_track_id_tree_create()
    id:     the ID of the track to search for
    Returns: the Itdb_Track whose ID is id, or NULL if such a track
    couldn't be found

    """
  return _gpod.itdb_track_id_tree_by_id(*args)

def itdb_playlist_new(*args):
  """
    itdb_playlist_new(gchar title, gboolean spl) -> Itdb_Playlist

    Creates a new playlist. If spl is TRUE, a smart playlist is
    generated. pl->id is set by itdb_playlist_add() when the playlist
    is added to an Itdb_iTunesDB

    Parameters
    title:  playlist title
    spl:    smart playlist flag
    Returns: a new Itdb_Playlist which must be freed with
    itdb_playlist_free() after use

    """
  return _gpod.itdb_playlist_new(*args)

def itdb_playlist_free(*args):
  """
    itdb_playlist_free(Itdb_Playlist pl)

    Frees the memory used by playlist pl.

    Parameters
    pl: an Itdb_Playlist

    """
  return _gpod.itdb_playlist_free(*args)

def itdb_playlist_add(*args):
  """
    itdb_playlist_add(Itdb_iTunesDB itdb, Itdb_Playlist pl, gint32 pos)

    Adds playlist pl to the database itdb at position pos (-1 for
    "append to end"). A unique id is created if pl->id is equal to
    zero. After calling this function, itdb manages the memory of pl,
    which means you no longer need to explicitly call
    itdb_playlist_free()

    Parameters
    itdb:   an Itdb_iTunesDB
    pl:     an Itdb_Playlist
    pos:    position to insert pl at

    """
  return _gpod.itdb_playlist_add(*args)

def itdb_playlist_move(*args):
  """
    itdb_playlist_move(Itdb_Playlist pl, guint32 pos)

    Moves playlist pl to position pos

    Parameters
    pl:     an Itdb_Playlist
    pos:    new position

    """
  return _gpod.itdb_playlist_move(*args)

def itdb_playlist_remove(*args):
  """
    itdb_playlist_remove(Itdb_Playlist pl)

    Removes pl from the Itdb_iTunesDB it's associated with
    and frees memory

    Parameters
    pl: an Itdb_Playlist

    """
  return _gpod.itdb_playlist_remove(*args)

def itdb_playlist_unlink(*args):
  """
    itdb_playlist_unlink(Itdb_Playlist pl)

    Remove pl from the Itdb_iTunesDB it's associated with but do not
    free memory. pl->itdb is set to NULL after this function returns

    Parameters
    pl: an Itdb_Playlist

    """
  return _gpod.itdb_playlist_unlink(*args)

def itdb_playlist_duplicate(*args):
  """
    itdb_playlist_duplicate(Itdb_Playlist pl) -> Itdb_Playlist

    Duplicates an existing playlist. pl_dup->id is set to zero, so
    that it will be set to a unique value when adding it to an
    Itdb_iTunesDB. The returned playlist won't be associated with an
    Itdb_iTunesDB.

    Parameters
    pl: an Itdb_Playlist
    Returns: a newly allocated Itdb_Playlist that you'll have to
    free with itdb_playlist_free() when you no longer need it.

    """
  return _gpod.itdb_playlist_duplicate(*args)

def itdb_playlist_exists(*args):
  """
    itdb_playlist_exists(Itdb_iTunesDB itdb, Itdb_Playlist pl) -> gboolean

    Checks if pl is present in itdb

    Parameters
    itdb:   an Itdb_iTunesDB
    pl:     an Itdb_Playlist
    Returns: TRUE if pl exists in itdb, FALSE otherwise

    """
  return _gpod.itdb_playlist_exists(*args)

def itdb_playlist_add_track(*args):
  """
    itdb_playlist_add_track(Itdb_Playlist pl, Itdb_Track track, gint32 pos)

    Adds track to pl at position pos (-1 to append at the end)

    Parameters
    pl:     an Itdb_Playlist
    track:  an Itdb_Track
    pos:    position to insert track at

    """
  return _gpod.itdb_playlist_add_track(*args)

def itdb_playlist_by_id(*args):
  """
    itdb_playlist_by_id(Itdb_iTunesDB itdb, guint64 id) -> Itdb_Playlist

    Looks up a playlist whose ID is id

    Parameters
    itdb:   an Itdb_iTunesDB
    id:     ID of the playlist to look for
    Returns: the Itdb_Playlist with ID id or NULL if there is no
    such playlist.

    """
  return _gpod.itdb_playlist_by_id(*args)

def itdb_playlist_by_nr(*args):
  """
    itdb_playlist_by_nr(Itdb_iTunesDB itdb, guint32 num) -> Itdb_Playlist

    Gets the playlist at the given position in itdb

    Parameters
    itdb:   an Itdb_iTunesDB
    num:    the position of the playlist, counting from 0
    Returns: the Itdb_Playlist, or NULL if there is no playlist
    at pos

    """
  return _gpod.itdb_playlist_by_nr(*args)

def itdb_playlist_by_name(*args):
  """
    itdb_playlist_by_name(Itdb_iTunesDB itdb, gchar name) -> Itdb_Playlist

    Searches a playlist whose name is name in itdb

    Parameters
    itdb:   an Itdb_iTunesDB
    name:   name of the playlist to look for
    Returns: the first Itdb_Playlist with name name, NULL if
    there is no such playlist

    """
  return _gpod.itdb_playlist_by_name(*args)

def itdb_playlist_contains_track(*args):
  """
    itdb_playlist_contains_track(Itdb_Playlist pl, Itdb_Track track) -> gboolean

    Checks if track is in pl

    Parameters
    pl:     an Itdb_Playlist
    track:  an Itdb_Track
    Returns: TRUE if track is in pl, FALSE otherwise

    """
  return _gpod.itdb_playlist_contains_track(*args)

def itdb_playlist_contain_track_number(*args):
  """
    itdb_playlist_contain_track_number(Itdb_Track tr) -> guint32

    Counts the number of playlist track is a member of (not including
    the master playlist)

    Parameters
    tr: an Itdb_Track
    Returns: the number of playlist containing track

    """
  return _gpod.itdb_playlist_contain_track_number(*args)

def itdb_playlist_remove_track(*args):
  """
    itdb_playlist_remove_track(Itdb_Playlist pl, Itdb_Track track)

    Removes track from pl. If pl is NULL, removes track from the
    master playlist. If track can't be found in pl, nothing happens.
    If after removing track, pl is empty, it's not removed from the
    database The memory used by track isn't freed.

    Parameters
    pl:     an Itdb_Playlist
    track:  an Itdb_Track

    """
  return _gpod.itdb_playlist_remove_track(*args)

def itdb_playlist_tracks_number(*args):
  """
    itdb_playlist_tracks_number(Itdb_Playlist pl) -> guint32

    Counts the number of tracks in pl

    Parameters
    pl: an Itdb_Playlist
    Returns: the number of tracks in pl

    """
  return _gpod.itdb_playlist_tracks_number(*args)

def itdb_playlist_randomize(*args):
  """
    itdb_playlist_randomize(Itdb_Playlist pl)

    Randomizes pl

    Parameters
    pl: an Itdb_Playlist to randomize

    """
  return _gpod.itdb_playlist_randomize(*args)

def itdb_playlist_mpl(*args):
  """
    itdb_playlist_mpl(Itdb_iTunesDB itdb) -> Itdb_Playlist

    Gets the master playlist of itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the master playlist of itdb

    """
  return _gpod.itdb_playlist_mpl(*args)

def itdb_playlist_is_mpl(*args):
  """
    itdb_playlist_is_mpl(Itdb_Playlist pl) -> gboolean

    Checks if pl is the master playlist

    Parameters
    pl: an Itdb_Playlist
    Returns: TRUE if pl is the master playlist, FALSE otherwise


    """
  return _gpod.itdb_playlist_is_mpl(*args)

def itdb_playlist_set_mpl(*args):
  """
    itdb_playlist_set_mpl(Itdb_Playlist pl)

    Sets pl to be a master playlist

    Parameters
    pl: an Itdb_Playlist

    """
  return _gpod.itdb_playlist_set_mpl(*args)

def itdb_playlist_podcasts(*args):
  """
    itdb_playlist_podcasts(Itdb_iTunesDB itdb) -> Itdb_Playlist

    Gets the podcasts playlist of itdb

    Parameters
    itdb: an Itdb_iTunesDB
    Returns: the podcasts playlist of itdb, or NULL if there is
    not one


    """
  return _gpod.itdb_playlist_podcasts(*args)

def itdb_playlist_is_podcasts(*args):
  """
    itdb_playlist_is_podcasts(Itdb_Playlist pl) -> gboolean

    Checks if pl is the podcasts playlist

    Parameters
    pl: an Itdb_Playlist
    Returns: TRUE if pl is the podcasts playlist, FALSE otherwise


    """
  return _gpod.itdb_playlist_is_podcasts(*args)

def itdb_playlist_set_podcasts(*args):
  """
    itdb_playlist_set_podcasts(Itdb_Playlist pl)

    Set pl to be a podcasts playlist

    Parameters
    pl: an Itdb_Playlist

    """
  return _gpod.itdb_playlist_set_podcasts(*args)

def itdb_splr_get_field_type(*args):
  """
    itdb_splr_get_field_type(Itdb_SPLRule splr) -> ItdbSPLFieldType

    Gets the type of the field of the splr rule

    Parameters
    splr: an Itdb_SPLRule
    Returns: an Itdb_SPLFieldType corresponding to splr field
    type (string, int, date, ...)

    """
  return _gpod.itdb_splr_get_field_type(*args)

def itdb_splr_get_action_type(*args):
  """
    itdb_splr_get_action_type(Itdb_SPLRule splr) -> ItdbSPLActionType

    Gets the type of the action associated with splr.

    Parameters
    splr: an Itdb_SPLRule
    Returns: type (range, date, string...) of the action field

    """
  return _gpod.itdb_splr_get_action_type(*args)

def itdb_splr_validate(*args):
  """
    itdb_splr_validate(Itdb_SPLRule splr)

    Validates a smart playlist rule

    Parameters
    splr: an Itdb_SPLRule

    """
  return _gpod.itdb_splr_validate(*args)

def itdb_splr_remove(*args):
  """
    itdb_splr_remove(Itdb_Playlist pl, Itdb_SPLRule splr)

    Removes the smart playlist rule splr from playlist pl. The memory
    used by splr is freed.

    Parameters
    pl: an Itdb_Playlist
    splr: an Itdb_SPLRule

    """
  return _gpod.itdb_splr_remove(*args)

def itdb_splr_new(*args):
  """
    itdb_splr_new() -> Itdb_SPLRule

    Creates a new default smart rule

    Parameters
    Returns: a new Itdb_SPLRule that must be freed with itdb_splr_free() when
    no longer needed

    """
  return _gpod.itdb_splr_new(*args)

def itdb_splr_add(*args):
  """
    itdb_splr_add(Itdb_Playlist pl, Itdb_SPLRule splr, gint pos)

    Adds the smart rule splr to pl at position pos. If pos is -1,
    splr gets appended to the end. After this call, splr memory is
    managed by pl, so you no longer need to call itdb_splr_free()

    Parameters
    pl:     an Itdb_Playlist
    splr:   an Itdb_SPLRule
    pos:    position of the rule

    """
  return _gpod.itdb_splr_add(*args)

def itdb_splr_add_new(*args):
  """
    itdb_splr_add_new(Itdb_Playlist pl, gint pos) -> Itdb_SPLRule

    Creates a new smart rule and inserts it at position pos in pl. If
    pos is -1, the new rule gets appended to the end.

    Parameters
    pl:     an Itdb_Playlist
    pos:    position to insert the rule at
    Returns: pointer to the newly created Itdb_SPLRule. Its
    memory is handled by pl though, so you don't need to explicitly
    call itdb_splr_free() on it

    """
  return _gpod.itdb_splr_add_new(*args)

def itdb_spl_copy_rules(*args):
  """
    itdb_spl_copy_rules(Itdb_Playlist dest, Itdb_Playlist src)

    Copy all relevant information for smart playlist from playlist src
    to playlist dest. If dest is already a smart playlist, the
    existing data is overwritten/deleted.

    Parameters
    dest:   destination Itdb_Playlist
    src:    source Itdb_Playlist

    """
  return _gpod.itdb_spl_copy_rules(*args)

def itdb_splr_eval(*args):
  """
    itdb_splr_eval(Itdb_SPLRule splr, Itdb_Track track) -> gboolean

    Evaluates splr's truth against track. track->itdb must be set.

    Parameters
    splr:   an Itdb_SPLRule
    track:  an Itdb_Track
    Returns: TRUE if track matches splr, FALSE otherwise.

    """
  return _gpod.itdb_splr_eval(*args)

def itdb_spl_update(*args):
  """
    itdb_spl_update(Itdb_Playlist spl)

    Updates the content of the smart playlist spl (meant to be called
    if the tracks stored in the Itdb_iTunesDB associated with spl
    have changed somehow and you want spl->members to be accurate
    with regards to those changes. Does nothing if spl isn't a smart
    playlist.

    Parameters
    spl: an Itdb_Playlist

    """
  return _gpod.itdb_spl_update(*args)

def itdb_spl_update_all(*args):
  """
    itdb_spl_update_all(Itdb_iTunesDB itdb)

    Updates all smart playlists contained in itdb

    Parameters
    itdb: an Itdb_iTunesDB

    """
  return _gpod.itdb_spl_update_all(*args)

def itdb_spl_update_live(*args):
  """
    itdb_spl_update_live(Itdb_iTunesDB itdb)

    Updates all smart playlists contained in itdb which have the
    liveupdate flag set.

    Parameters
    itdb: an Itdb_iTunesDB

    """
  return _gpod.itdb_spl_update_live(*args)

def itdb_track_set_thumbnails(*args):
  """
    itdb_track_set_thumbnails(Itdb_Track track, gchar filename) -> gboolean

    Uses the image contained in filename to generate iPod thumbnails. The image
    can be in any format supported by gdk-pixbuf. To save memory, the thumbnails
    will only be generated when necessary, i.e. when itdb_save() or a similar
    function is called.

    Parameters
    track:    an Itdb_Track
    filename: image file to use as a thumbnail
    Returns: TRUE if the thumbnail could be added, FALSE otherwise.


    """
  return _gpod.itdb_track_set_thumbnails(*args)

def itdb_track_set_thumbnails_from_data(*args):
  """
    itdb_track_set_thumbnails_from_data(Itdb_Track track, guchar image_data, gsize image_data_len) -> gboolean

    Uses image_data to generate iPod thumbnails. The image can be in
    any format supported by gdk-pixbuf. To save memory, the thumbnails
    will only be generated when necessary, i.e. when itdb_save() or a
    similar function is called.

    Parameters
    track:          an Itdb_Track
    image_data:     data used to create the thumbnail (the raw contents of
                     an image file)
    image_data_len: length of above data block
    Returns: TRUE if the thumbnail could be added, FALSE otherwise.


    """
  return _gpod.itdb_track_set_thumbnails_from_data(*args)

def itdb_track_set_thumbnails_from_pixbuf(*args):
  """
    itdb_track_set_thumbnails_from_pixbuf(Itdb_Track track, gpointer pixbuf) -> gboolean

    Uses pixbuf to generate iPod thumbnails. To save memory, the thumbnails
    will only be generated when necessary, i.e. when itdb_save() or a
    similar function is called.

    Parameters
    track:  an Itdb_Track
    pixbuf: a GdkPixbuf used to generate the thumbnail
    Returns: TRUE if the thumbnail could be added, FALSE otherwise.


    """
  return _gpod.itdb_track_set_thumbnails_from_pixbuf(*args)

def itdb_track_has_thumbnails(*args):
  """
    itdb_track_has_thumbnails(Itdb_Track track) -> gboolean

    Determine if a track has thumbnails

    Parameters
    track: an Itdb_Track
    Returns: TRUE if track has artwork available, FALSE otherwise


    """
  return _gpod.itdb_track_has_thumbnails(*args)

def itdb_track_remove_thumbnails(*args):
  """
    itdb_track_remove_thumbnails(Itdb_Track track)

    Removes the thumbnails associated with track

    Parameters
    track: an Itdb_Track

    """
  return _gpod.itdb_track_remove_thumbnails(*args)

def itdb_track_get_thumbnail(*args):
  """
    itdb_track_get_thumbnail(Itdb_Track track, gint width, gint height) -> gpointer

    Get a thumbnail representing the cover associated with the current track,
    scaling it if appropriate. If either height or width is -1, then the biggest
    unscaled thumbnail available will be returned.

    Parameters
    track:  an Itdb_Track
    width:  width of the pixbuf to retrieve, -1 for the biggest possible size
             (with no scaling)
    height: height of the pixbuf to retrieve, -1 for the biggest possible size
             (with no scaling)
    Returns: a GdkPixbuf that must be unreffed when no longer used, NULL
    if no artwork could be found or if libgpod is compiled without GdkPixbuf
    support


    """
  return _gpod.itdb_track_get_thumbnail(*args)

def itdb_photodb_parse(*args):
  """
    itdb_photodb_parse(gchar mp, GError error) -> Itdb_PhotoDB

    Parses the photo database of an iPod mounted at mp.

    Parameters
    mp:     mountpoint of the iPod
    error:  will contain the error description when an error occured.
    Returns: the imported PhotoDB or NULL in case of an error.


    """
  return _gpod.itdb_photodb_parse(*args)

def itdb_photodb_add_photo(*args):
  """
    itdb_photodb_add_photo(Itdb_PhotoDB db, gchar filename, gint position, gint rotation, 
        GError error) -> Itdb_Artwork

    Add a photo to the PhotoDB. The photo is automatically added to the
    first Photoalbum, which by default contains a list of all photos in
    the database. If no Photoalbums exist one is created automatically.


    Parameters
    db:         the Itdb_PhotoDB to add the photo to
    filename:   path of the photo to add.
    position:   position where to insert the new photo (-1 to append
                 at the end)
    rotation:   angle by which the image should be rotated
                 counterclockwise. Valid values are 0, 90, 180 and 270.
    error:      return location for a GError or NULL
    Returns: a pointer to the added photo.


    """
  return _gpod.itdb_photodb_add_photo(*args)

def itdb_photodb_add_photo_from_data(*args):
  """
    itdb_photodb_add_photo_from_data(Itdb_PhotoDB db, guchar image_data, gsize image_data_len, 
        gint position, gint rotation, GError error) -> Itdb_Artwork

    Add a photo to the PhotoDB. The photo is automatically added to the
    first Photoalbum, which by default contains a list of all photos in
    the database. If no Photoalbums exist one is created automatically.


    Parameters
    db:             the Itdb_PhotoDB to add the photo to
    image_data:     chunk of memory containing the image data (for
                     example a jpg file)
    image_data_len: length of above chunk of memory
    position:       position where to insert the new photo (-1 to
                     append at the end)
    rotation:       angle by which the image should be rotated
                     counterclockwise. Valid values are 0, 90, 180 and 270.
    error:          return location for a GError or NULL
    Returns: a pointer to the added photo.


    """
  return _gpod.itdb_photodb_add_photo_from_data(*args)

def itdb_photodb_add_photo_from_pixbuf(*args):
  """
    itdb_photodb_add_photo_from_pixbuf(Itdb_PhotoDB db, gpointer pixbuf, gint position, gint rotation, 
        GError error) -> Itdb_Artwork

    Add a photo to the PhotoDB. The photo is automatically added to the
    first Photoalbum, which by default contains a list of all photos in
    the database. If no Photoalbums exist one is created automatically.


    Parameters
    db:         the Itdb_PhotoDB to add the photo to
    pixbuf:     a GdkPixbuf to use as the image data
    position:   position where to insert the new photo (-1 to append
                 at the end)
    rotation:   angle by which the image should be rotated
                 counterclockwise. Valid values are 0, 90, 180 and 270.
    error:      return location for a GError or NULL
    Returns: a pointer to the added photo.


    """
  return _gpod.itdb_photodb_add_photo_from_pixbuf(*args)

def itdb_photodb_photoalbum_add_photo(*args):
  """
    itdb_photodb_photoalbum_add_photo(Itdb_PhotoDB db, Itdb_PhotoAlbum album, Itdb_Artwork photo, 
        gint position)

    Adds a photo already in the library to the specified album
    album. Photos are automatically added to the first album (Photo
    Library) when calling itdb_photodb_add_photo() or
    itdb_photodb_add_photo_from_data(), so you don't have to use this
    function to add them there.

    Parameters
    db:         the Itdb_PhotoDB to act on
    album:      the Itdb_PhotoAlbum to add the photo to
    photo:      a pointer to the photo (Itdb_Artwork) to add to the
                 album
    position:   position where to insert the new photo (-1 to append
                 at the end)

    """
  return _gpod.itdb_photodb_photoalbum_add_photo(*args)

def itdb_photodb_photoalbum_create(*args):
  """
    itdb_photodb_photoalbum_create(Itdb_PhotoDB db, gchar albumname, gint pos) -> Itdb_PhotoAlbum

    Create and add a new photoalbum.

    Parameters
    db:         The database to create a new album in
    albumname:  the name of the new album
    pos:        position where to insert the newly created album (-1
                 to append at the end).
    Returns: the album which was created and added.


    """
  return _gpod.itdb_photodb_photoalbum_create(*args)

def itdb_photodb_create(*args):
  """
    itdb_photodb_create(gchar mountpoint) -> Itdb_PhotoDB

    Creates a new Itdb_PhotoDB. If mountpoint is NULL, you will have to
    set it manually later by calling itdb_device_set_mountpoint().

    Parameters
    mountpoint: mountpoint or NULL.
    Returns: a newly created Itdb_PhotoDB to be freed with
    itdb_photodb_free() when it's no longer needed. The Photo Library
    Album is created automatically.


    """
  return _gpod.itdb_photodb_create(*args)

def itdb_photodb_free(*args):
  """
    itdb_photodb_free(Itdb_PhotoDB photodb)

    Free the memory taken by photodb.

    Parameters
    photodb: an Itdb_PhotoDB

    """
  return _gpod.itdb_photodb_free(*args)

def itdb_photodb_write(*args):
  """
    itdb_photodb_write(Itdb_PhotoDB photodb, GError error) -> gboolean

    Write out a PhotoDB.


    Parameters
    photodb:    the Itdb_PhotoDB to write to disk
    error:      return location for a GError or NULL
    Returns: TRUE on success, FALSE on error, in which case error is
    set accordingly.


    """
  return _gpod.itdb_photodb_write(*args)

def itdb_photodb_remove_photo(*args):
  """
    itdb_photodb_remove_photo(Itdb_PhotoDB db, Itdb_PhotoAlbum album, Itdb_Artwork photo)

    Removes a photo. If album is not the first photoalbum, the photo
    will be removed from that album only. If album is NULL or the
    first photoalbum (Photo Library), the photo will be removed from
    all albums and the Itdb_PhotoDB.


    Parameters
    db:     the Itdb_PhotoDB to remove the photo from
    album:  the album to remove the photo from. If album is NULL, then
             it will first be removed from all photoalbums and then
             from the photo database as well.
    photo:  Itdb_Artwork (photo) to remove.

    """
  return _gpod.itdb_photodb_remove_photo(*args)

def itdb_photodb_photoalbum_remove(*args):
  """
    itdb_photodb_photoalbum_remove(Itdb_PhotoDB db, Itdb_PhotoAlbum album, gboolean remove_pics)

    Remove album from the Photo Database. If remove_pics is TRUE,
    remove all photos contained in album from the Photo Database.


    Parameters
    db:             the Itdb_PhotoDB to apply changes to
    album:          the album to be removed from the database
    remove_pics:    TRUE to remove pics in that album permanently
                     from the database.

    """
  return _gpod.itdb_photodb_photoalbum_remove(*args)

def itdb_photodb_photoalbum_by_name(*args):
  """
    itdb_photodb_photoalbum_by_name(Itdb_PhotoDB db, gchar albumname) -> Itdb_PhotoAlbum

    Find the first photoalbum with a given name or the Photo Library
    Album if called with no name.

    Parameters
    db:         the Itdb_PhotoDB to retrieve the album from
    albumname:  the name of the photoalbum to get or NULL for the
                 master photoalbum.
    Returns: a pointer to the first photoalbum named albumname,
    else NULL


    """
  return _gpod.itdb_photodb_photoalbum_by_name(*args)

def itdb_artwork_new(*args):
  """
    itdb_artwork_new() -> Itdb_Artwork

    Creates a new Itdb_Artwork

    Parameters
    Returns: a new Itdb_Artwork to be freed with itdb_artwork_free() when
    no longer needed


    """
  return _gpod.itdb_artwork_new(*args)

def itdb_artwork_duplicate(*args):
  """
    itdb_artwork_duplicate(Itdb_Artwork artwork) -> Itdb_Artwork

    Duplicates artwork

    Parameters
    artwork: an Itdb_Artwork
    Returns: a new copy of artwork


    """
  return _gpod.itdb_artwork_duplicate(*args)

def itdb_artwork_free(*args):
  """
    itdb_artwork_free(Itdb_Artwork artwork)

    Frees memory used by artwork

    Parameters
    artwork: an Itdb_Artwork

    """
  return _gpod.itdb_artwork_free(*args)

def itdb_artwork_set_thumbnail(*args):
  """
    itdb_artwork_set_thumbnail(Itdb_Artwork artwork, gchar filename, gint rotation, 
        GError error) -> gboolean

    Appends a thumbnail of type type to existing thumbnails in artwork. No
    data is read from filename yet, the file will be when artwork is saved to
    disk. filename must still exist when that happens.


    Parameters
    artwork:    an Itdb_Artwork
    filename:   image file to use to create the thumbnail
    rotation:   angle by which the image should be rotated
                 counterclockwise. Valid values are 0, 90, 180 and 270.
    error:      return location for a GError or NULL
    Returns: TRUE if the thumbnail could be successfully added, FALSE
    otherwise. error is set appropriately.


    """
  return _gpod.itdb_artwork_set_thumbnail(*args)

def itdb_artwork_set_thumbnail_from_data(*args):
  """
    itdb_artwork_set_thumbnail_from_data(Itdb_Artwork artwork, guchar image_data, gsize image_data_len, 
        gint rotation, GError error) -> gboolean

    Set a thumbnail in artwork. No data is processed yet. This will be done when
    artwork is saved to disk.


    Parameters
    artwork:        an Itdb_Artwork
    image_data:     data used to create the thumbnail (the raw contents of
                     an image file)
    image_data_len: length of above data block
    rotation:       angle by which the image should be rotated
                     counterclockwise. Valid values are 0, 90, 180 and 270.
    error:          return location for a GError or NULL
    Returns: TRUE if the thumbnail could be successfully added, FALSE
    otherwise. error is set appropriately.


    """
  return _gpod.itdb_artwork_set_thumbnail_from_data(*args)

def itdb_artwork_set_thumbnail_from_pixbuf(*args):
  """
    itdb_artwork_set_thumbnail_from_pixbuf(Itdb_Artwork artwork, gpointer pixbuf, gint rotation, 
        GError error) -> gboolean

    Set a thumbnail in artwork. No data is generated from pixbuf yet, it will
    be done when artwork is saved to disk. pixbuf is ref'ed by this function,
    but is not copied, so it should not be modified before the database is saved.


    Parameters
    artwork:    an Itdb_Artwork
    pixbuf:     GdkPixbuf to use to create the thumbnail
    rotation:   angle by which the image should be rotated
                 counterclockwise. Valid values are 0, 90, 180 and 270.
    error:      return location for a GError or NULL
    Returns: TRUE if the thumbnail could be successfully added, FALSE
    otherwise. error is set appropriately.


    """
  return _gpod.itdb_artwork_set_thumbnail_from_pixbuf(*args)

def itdb_artwork_remove_thumbnails(*args):
  """
    itdb_artwork_remove_thumbnails(Itdb_Artwork artwork)

    Removes all thumbnails from artwork

    Parameters
    artwork: an Itdb_Artwork

    """
  return _gpod.itdb_artwork_remove_thumbnails(*args)

def itdb_artwork_get_pixbuf(*args):
  """
    itdb_artwork_get_pixbuf(Itdb_Device device, Itdb_Artwork artwork, gint width, 
        gint height) -> gpointer

    Returns a GdkPixbuf representing the thumbnail stored in artwork
    scaling it if appropriate. If either height or width is -1, then the
    biggest unscaled thumbnail available will be returned

    Parameters
    device:     an Itdb_Device
    artwork:    an Itdb_Artwork
    width:      width of the pixbuf to retrieve, -1 for the biggest
                 possible size and 0 for the smallest possible size (with no
                 scaling)
    height:     height of the pixbuf to retrieve, -1 for the biggest possible
                 size and 0 for the smallest possible size (with no scaling)
    Returns: a GdkPixbuf that must be unreffed when no longer used, NULL
    if no artwork could be found or if libgpod is compiled without GdkPixbuf
    support


    """
  return _gpod.itdb_artwork_get_pixbuf(*args)

def itdb_thumb_duplicate(*args):
  """
    itdb_thumb_duplicate(Itdb_Thumb thumb) -> Itdb_Thumb

    Duplicates the data contained in thumb

    Parameters
    thumb: an Itdb_Thumb
    Returns: a newly allocated copy of thumb to be freed with
    itdb_thumb_free() after use


    """
  return _gpod.itdb_thumb_duplicate(*args)

def itdb_thumb_to_pixbuf_at_size(*args):
  """
    itdb_thumb_to_pixbuf_at_size(Itdb_Device device, Itdb_Thumb thumb, gint width, gint height) -> gpointer

    Converts thumb to a GdkPixbuf.


    Parameters
    device: an Itdb_Device
    thumb:  an Itdb_Thumb
    width:  width of the pixbuf to retrieve, -1 for the biggest
             possible size and 0 for the smallest possible size (with no scaling)
    height: height of the pixbuf to retrieve, -1 for the biggest possible size
             and 0 for the smallest possible size (with no scaling)
    Returns: a GdkPixbuf that must be unreffed with gdk_pixbuf_unref()
    after use, or NULL if the creation of the gdk-pixbuf failed or if
    libgpod was compiled without gdk-pixbuf support.


    """
  return _gpod.itdb_thumb_to_pixbuf_at_size(*args)

def itdb_thumb_to_pixbufs(*args):
  """
    itdb_thumb_to_pixbufs(Itdb_Device device, Itdb_Thumb thumb) -> GList

    Converts thumb to a GList of GdkPixbuf. The returned GList will
    generally contain only 1 element, the full-size pixbuf associated with
    thumb, but when the artwork has been read from the ipod and hasn't been
    modified from the library, then the returned GList will contain several
    GdkPixbuf corresponding to the various thumbnail sizes that were
    written to the iPod database.

    Parameters
    device: an Itdb_Device
    thumb:  an Itdb_Thumb
    Returns: a GList of GdkPixbuf which are associated with thumb, NULL
    if the pixbuf was invalid or if libgpod is compiled without gdk-pixbuf
    support. The GdkPixbuf must be unreffed with gdk_pixbuf_unref() after use
    and the GList must be freed with g_list_free().


    """
  return _gpod.itdb_thumb_to_pixbufs(*args)

def itdb_thumb_free(*args):
  """
    itdb_thumb_free(Itdb_Thumb thumb)

    Frees the memory used by thumb

    Parameters
    thumb: an Itdb_Thumb

    """
  return _gpod.itdb_thumb_free(*args)

def itdb_chapterdata_new(*args):
  """
    itdb_chapterdata_new() -> Itdb_Chapterdata

    Creates a new Itdb_Chapterdata

    Parameters
    Returns: a new Itdb_Chapterdata to be freed with
                  itdb_chapterdata_free() when no longer needed


    """
  return _gpod.itdb_chapterdata_new(*args)

def itdb_chapterdata_free(*args):
  """
    itdb_chapterdata_free(Itdb_Chapterdata chapterdata)

    Frees memory used by chapterdata

    Parameters
    chapterdata: an Itdb_Chapterdata

    """
  return _gpod.itdb_chapterdata_free(*args)

def itdb_chapterdata_duplicate(*args):
  """
    itdb_chapterdata_duplicate(Itdb_Chapterdata chapterdata) -> Itdb_Chapterdata

    Duplicates chapterdata

    Parameters
    chapterdata: an Itdb_Chapterdata
    Returns: a new copy of chapterdata


    """
  return _gpod.itdb_chapterdata_duplicate(*args)

def itdb_chapterdata_remove_chapter(*args):
  """
    itdb_chapterdata_remove_chapter(Itdb_Chapterdata chapterdata, Itdb_Chapter chapter)

    Removes chapter from chapterdata. The memory used by chapter is freed.

    Parameters
    chapterdata: an Itdb_Chapterdata
    chapter:     an Itdb_Chapter

    """
  return _gpod.itdb_chapterdata_remove_chapter(*args)

def itdb_chapterdata_remove_chapters(*args):
  """
    itdb_chapterdata_remove_chapters(Itdb_Chapterdata chapterdata)

    Removes all chapters from chapterdata

    Parameters
    chapterdata: an Itdb_Chapterdata

    """
  return _gpod.itdb_chapterdata_remove_chapters(*args)

def itdb_chapter_new(*args):
  """
    itdb_chapter_new() -> Itdb_Chapter

    Creates a new Itdb_Chapter

    Parameters
    Returns: newly allocated Itdb_Chapter to be freed with itdb_chapter_free()
    after use


    """
  return _gpod.itdb_chapter_new(*args)

def itdb_chapter_free(*args):
  """
    itdb_chapter_free(Itdb_Chapter chapter)

    Frees the memory used by chapter

    Parameters
    chapter: an Itdb_Chapter

    """
  return _gpod.itdb_chapter_free(*args)

def itdb_chapter_duplicate(*args):
  """
    itdb_chapter_duplicate(Itdb_Chapter chapter) -> Itdb_Chapter

    Duplicates the data contained in chapter

    Parameters
    chapter: an Itdb_Chapter
    Returns: a newly allocated copy of chapter to be freed with
    itdb_chapter_free() after use


    """
  return _gpod.itdb_chapter_duplicate(*args)

def itdb_chapterdata_add_chapter(*args):
  """
    itdb_chapterdata_add_chapter(Itdb_Chapterdata chapterdata, gint32 startpos, gchar chaptertitle) -> gboolean

    Appends a chapter to existing chapters in chapterdata.

    Parameters
    chapterdata:  an Itdb_Chapterdata
    startpos:     chapter start time in milliseconds
    chaptertitle: chapter title
    Returns: TRUE if the chapter could be successfully added, FALSE
    otherwise.


    """
  return _gpod.itdb_chapterdata_add_chapter(*args)

def itdb_time_get_mac_time(*args):
  """
    itdb_time_get_mac_time() -> time_t

    Gets the current time in a format appropriate for storing in the libgpod
    data structures

    Parameters
    Returns: current time


    """
  return _gpod.itdb_time_get_mac_time(*args)

def itdb_time_mac_to_host(*args):
  """
    itdb_time_mac_to_host(time_t time) -> time_t

    Converts a timestamp from libgpod format to host system timestamp.

    Parameters
    time: time expressed in libgpod format
    Returns: timestamp for the host system


    """
  return _gpod.itdb_time_mac_to_host(*args)

def itdb_time_host_to_mac(*args):
  """
    itdb_time_host_to_mac(time_t time) -> time_t

    Convert host system timestamp to libgpod format timestamp

    Parameters
    time: time expressed in host unit
    Returns: a libgpod timestamp


    """
  return _gpod.itdb_time_host_to_mac(*args)

def itdb_init_ipod(*args):
  """
    itdb_init_ipod(gchar mountpoint, gchar model_number, gchar ipod_name, 
        GError error) -> gboolean

    Initialise an iPod device from scratch. The function attempts to
    create a blank database, complete with master playlist and device
    information as well as the directory structure required for the
    type of iPod.
    model_number is used to tell libgpod about the exact iPod
    model, which is needed for proper artwork writing. model_number can be
    found from the table returned by itdb_device_get_ipod_info_table (for
    example). On recent distros with iPods released
    in the last few years (starting with the iPod Color), it should be fine
    to pass in a NULL model_number while still getting artwork writing.

    Parameters
    mountpoint:   the iPod mountpoint
    model_number: the iPod model number, can be NULL
    ipod_name:    the name to give to the iPod. Will be displayed in
                   gtkpod or itunes
    error:        return location for a GError or NULL
    Returns: TRUE when successful, FALSE if a failure has occurred.


    """
  return _gpod.itdb_init_ipod(*args)


