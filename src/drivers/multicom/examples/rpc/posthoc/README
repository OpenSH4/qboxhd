RPC Post-Hoc Decoration Example
===============================

The posthoc example is identical to the getstart example but is structured
using post-hoc decoration of the types and functions so that all the RPC
information can be collected into a single independant file.

Contents of the example
-----------------------

There are four fundamental components of the example.

 - cdplayer.h is an undecorated header file contining simple ANSI C 
   declarations.
 - cdplayer.c (identical to getstart example)
 - application.c (identical to getstart example)
 - cdplayer_idl.c contains all the RPC information for the system, the
   decorations are all contained in an rpc_info {} construct.

Using the example
-----------------

This example requires GNU make (or strictly compatible) to build and
should be build as follows:

  make PLATFORM=<platform> OS_0=<os_for_cpu0> OS_1=<os_for_cpu1> example

For currently support platforms see the example runtime harness 
(../../harness).

The examples should be booted using the appropriate runtime loader,
see the Multicom documentation for further information.

Points to note
--------------

The build system does not use rpccc because this is not needed with the
post-hoc approach.

cdplayer_idl.c includes "cdplayer.h". This allows the RPC generator to
perform strong consistancy checks between the the rpc_info {} construct
and the original declarations. Note that if these consistancy checks
fail the RPC generator issues warnings not errors, for this reason it
is important to check the output of strpcgen once in a while.

Although this example uses a single rpc_info {} construct the application
can contain as many rpc_info {} constructs as makes sense.

For other design notes see the getstart example.
