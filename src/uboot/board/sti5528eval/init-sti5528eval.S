/* $Id: init-sti5528eval.S,v 1.2 2005/11/10 11:21:29 sturgesa Exp $
 *
 *  gdb-sh-stub/init-espresso.S
 */

#include "../../cpu/sh4_1xx/init-st40common.S"

#define _SH4REG_ASM_
#include "asm/st40reg.h"

	.balign 4
9:

! Program clock generator registers
	POKE_LONG(0xb9163090, 0x0000c0de)	! CKG_LOCK (unlocked)
	UPDATE_LONG(0xb9163008,0xfffffff0, 0x7)	! CLOCKGEN_PLL1_CTRL2
	POKE_LONG(0xb9163024, 0x00000001)	! CPG_BYPASS
	OR_LONG(0xb9163008, 0x8)	        ! CLOCKGEN_PLL1_CTRL2
	POKE_LONG(0xb9163090, 0x00000000)	! CKG_LOCK (locked)
	
	POKE_LONG(0xb9163090, 0x0000c0de)	! CKG_LOCK (unlocked)
	UPDATE_LONG(0xb9163008, 0xfffffffa, 0)	! CLOCKGEN_PLL1_CTRL2
	POKE_LONG(0xb9163004, 0x0e40c71a)	! CLOCKGEN_PLL1_CTRL       PLL      = 400MHZ
	OR_LONG(0xb9163008, 0x1)	        ! CLOCKGEN_PLL1_CTRL2
	OR_LONG(0xb9163008, 0x4)	        ! CLOCKGEN_PLL1_CTRL2
	POKE_LONG(0xb9163090, 0x00000000)	! CKG_LOCK (locked)
	
	POKE_LONG(0xb9163090, 0x0000c0de)	! CKG_LOCK (unlocked)
	POKE_LONG(0xb916300C, 0x00000000)	! CLOCKGEN_PLL1_CLK1_CTRL  ST40CORE = 200
	POKE_LONG(0xb9163010, 0x00000001)	! CLOCKGEN_PLL1_CLK2_CTRL  STBUS    = 100
	POKE_LONG(0xb9163014, 0x00000002)	! CLOCKGEN_PLL1_CLK3_CTRL  ST40 PER = 66
	POKE_LONG(0xb9163018, 0x00000002)	! CLOCKGEN_PLL1_CLK4_CTRL  EMI      = 66
	POKE_LONG(0xb9163040, 0xde40841a)       ! CLOCKGEN_PLL2_CTRL (PLL 133MHz)
						! PLL setup procedure isn't equal to the procedure
						! described in the STi5528 hw manual but it works fine.
	POKE_LONG(0xb916308c, 0x0)              ! CLOCKGEN_PWM_CLK_CTRL
	POKE_LONG(0xb9163080, 0x0)              ! CLOCKGEN_AUD_CLK_REF_CTRL
	POKE_LONG(0xb9163074, 0x1b)             ! CLOCKGEN_ST20_TICK_CTRL
	POKE_LONG(0xb916307c, 0xb4b)            ! CLOCKGEN_LP_CLK_CTRL
	POKE_LONG(0xb9163088, 0x0)              ! CLOCKGEN_DVP_CLK_CTRL
	POKE_LONG(0xb9163090, 0x00000000)	! CKG_LOCK (locked)
! Program system configuration registers
	POKE_LONG(0xb916203c, 0x00010600)	! SYSCONF_SYS_CFG03 (Comms: SCIF not PIO7)
	POKE_LONG(0xb916205c, 0x000000ff)	! SYSCONF_SYS_CFG11 (LMI control 1)
	POKE_LONG(0xb9162060, 0x00000005)	! SYSCONF_SYS_CFG12 (LMI control 2)
	POKE_LONG(0xb9162064, 0x00000000)	! SYSCONF_SYS_CFG13 (LMI control 3)
! Program Bank Addresses
	! Setting EMILOCK register to unlock the EMI registers
	POKE_LONG(0xba100020, 0x00000000)	! EMI_LOCK
	POKE_LONG(0xba100860, 0x00000006)	! EMI_BANK_ENABLE
	POKE_LONG(0xba100800, 0x00000000)	! EMI_BANK0_BASEADDRESS
	POKE_LONG(0xba100810, 0x00000004)	! EMI_BANK1_BASEADDRESS
	POKE_LONG(0xba100820, 0x00000008)	! EMI_BANK2_BASEADDRESS
	POKE_LONG(0xba100830, 0x0000000c)	! EMI_BANK3_BASEADDRESS
	POKE_LONG(0xba100840, 0x0000000e)	! EMI_BANK4_BASEADDRESS
	POKE_LONG(0xba100850, 0x0000001c)	! EMI_BANK5_BASEADDRESS
! Program Bank Function 
	! Bank 0 - Boot Flash (16M)
	POKE_LONG(0xba100100, 0x001016e9)
	POKE_LONG(0xba100108, 0x9d200000)
	POKE_LONG(0xba100110, 0x9d220000)
	POKE_LONG(0xba100118, 0x00000000)
	! Bank 1 - Boot Flash (16Mb)
	POKE_LONG(0xba100140, 0x001016e9)
	POKE_LONG(0xba100148, 0x9d200000)
	POKE_LONG(0xba100150, 0x9d220000)
	POKE_LONG(0xba100158, 0x00000000)
	! Bank 2 - EPLD Registers and STi4629
	POKE_LONG(0xba100180, 0x002046f9)
	POKE_LONG(0xba100188, 0xa5a00000)
	POKE_LONG(0xba100190, 0xa5a20000)
	POKE_LONG(0xba100198, 0x00000000)
	! Bank 3 - USB/Ethernet STEM (DB558B)
	POKE_LONG(0xba1001c0, 0x041086e9)
	POKE_LONG(0xba1001c8, 0x0e024400)
	POKE_LONG(0xba1001d0, 0x0e024400)
	POKE_LONG(0xba1001d8, 0x00000000)
	! Bank 4 - Undefined (16Mb Flash)
	! Bank 5 - On-board SDRAM
	POKE_LONG(0xba100240, 0x0400044a)
	POKE_LONG(0xba100248, 0x007ffff0)
	POKE_LONG(0xba100250, 0x00000010)
	POKE_LONG(0xba100258, 0x00005fba)

! Program Other EMI Registers
	POKE_LONG(0xba100028, 0x00000098)	! EMI_GENCFG
	POKE_LONG(0xba100050, 0x00000000)	! EMI_FLASHCLKSEL (flash runs @ 1/3 bus clk)
	POKE_LONG(0xba100058, 0x00000000)	! EMI_SDRAMCLKSEL
	POKE_LONG(0xba100068, 0x00000001)	! EMI_CLKENABLE
	POKE_LONG(0xba100030, 0x00000001)	! EMI_SDRAMNOPGEN
	POKE_LONG(0xba100048, 0x000003e8)	! EMI_REFRESHINIT
	POKE_LONG(0xba100038, 0x00000032)	! EMI_SDRAMMODEREG
	POKE_LONG(0xba100040, 0x00000001)	! EMI_SDRAMINIT

! LMI configuration

! LMI registers
	POKE_LONG(0xaf000008, 0x05100243)	! LMI_MIM   
	POKE_LONG(0xaf000018, 0x00ef5c5a)       ! LMI_STR (SDRAM Timing Register ## CAS 2.0)
	POKE_LONG(0xaf000030, 0x0c001a00)	! LMI_SDRA0 (SDRAM Row Attribute 0)
	POKE_LONG(0xaf000038, 0x0c001a00)	! LMI_SDRA1 (SDRAM Row Attribute 1)

! Program LMI_SDRAM_CONTROL register
	POKE_LONG(0xaf000010, 0x00000001)	! LMI_SCR        
	POKE_LONG(0xaf000010, 0x00000003)	! LMI_SCR        
	POKE_LONG(0xaf000010, 0x00000001)	! LMI_SCR        
	POKE_LONG(0xaf000010, 0x00000002)	! LMI_SCR
	POKE_LONG(0xaf802000, 0x0)	! LMI_SDMR0 (EMRS to device ## Enable DLL)
	POKE_LONG(0xaf902000, 0x0)	! LMI_SDMR1 (EMRS to device ## Enable DLL)
	POKE_LONG(0xaf800b18, 0x0)	! LMI_SDMR0 (MRS to device ## Reset DLL)
	POKE_LONG(0xaf900b18, 0x0)	! LMI_SDMR1 (MRS to device ## Reset DLL)
	POKE_LONG(0xaf000010, 0x00000002)	! LMI_SCR (Pre-charge all)
	POKE_LONG(0xaf000010, 0x00000004)	! LMI_SCR (CBR)
	POKE_LONG(0xaf000010, 0x00000004)	! LMI_SCR (CBR)
	POKE_LONG(0xaf000010, 0x00000004)	! LMI_SCR (CBR)
	POKE_LONG(0xaf800318, 0x0)	! LMI_SDMR0 (MRS to device ## Normal)
	POKE_LONG(0xaf900318, 0x0)	! LMI_SDMR1 (MRS to device ## Normal)
	POKE_LONG(0xaf000010, 0x00000000)	! LMI_SCR (Normal operation)
! Program CCN_CCR register
	POKE_LONG(0xff00001c, 0x0000090b)       ! CCN_CCR
	
	END_MARKER
19:
